package ru.marslab.ide.ride.agent.impl

import com.intellij.openapi.diagnostic.Logger
import ru.marslab.ide.ride.agent.Agent
import ru.marslab.ide.ride.agent.formatter.PromptFormatter
import ru.marslab.ide.ride.integration.llm.LLMProvider
import ru.marslab.ide.ride.model.*

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á
 * 
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á,
 * –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω ExecutorAgent.
 *
 * @property llmProvider –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å LLM
 */
class PlannerAgent(
    private val llmProvider: LLMProvider
) : Agent {

    private val logger = Logger.getInstance(PlannerAgent::class.java)
    private var responseSchema: ResponseSchema = TaskPlanSchema.createJsonSchema()
    
    override val capabilities: AgentCapabilities = AgentCapabilities(
        stateful = false,
        streaming = false,
        reasoning = true,
        tools = emptySet(),
        systemPrompt = SYSTEM_PROMPT,
        responseRules = listOf(
            "–°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á",
            "–†–∞–∑–±–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏",
            "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ExecutorAgent"
        )
    )

    override suspend fun ask(req: AgentRequest): AgentResponse {
        if (!llmProvider.isAvailable()) {
            logger.warn("LLM provider is not available")
            return AgentResponse.error(
                error = "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                content = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ Settings ‚Üí Tools ‚Üí Ride"
            )
        }

        return try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
            val systemPromptWithSchema = PromptFormatter.formatPrompt(SYSTEM_PROMPT, responseSchema)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM
            val llmResponse = llmProvider.sendRequest(
                systemPrompt = systemPromptWithSchema,
                userMessage = req.request,
                conversationHistory = emptyList(),
                parameters = req.parameters
            )

            if (!llmResponse.success) {
                return AgentResponse.error(
                    error = llmResponse.error ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á"
                )
            }

            // –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
            val parsedPlan = responseSchema.parseResponse(llmResponse.content)
            
            if (parsedPlan == null || parsedPlan !is TaskPlanData) {
                logger.warn("Failed to parse task plan from response")
                return AgentResponse.error(
                    error = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–ª–∞–Ω –∑–∞–¥–∞—á",
                    content = buildString {
                        appendLine("‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á**")
                        appendLine()
                        appendLine("**–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:**")
                        appendLine("```")
                        appendLine(llmResponse.content)
                        appendLine("```")
                    }
                )
            }

            val plan = parsedPlan.plan
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            if (plan.isEmpty()) {
                return AgentResponse.error(
                    error = "–ü–ª–∞–Ω –∑–∞–¥–∞—á –ø—É—Å—Ç",
                    content = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
                )
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            val planContent = buildString {
                appendLine("üìã **–ü–ª–∞–Ω –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω**")
                appendLine()
                appendLine("**–¶–µ–ª—å:** ${plan.description}")
                appendLine()
                appendLine("**–ó–∞–¥–∞—á–∏ (${plan.size()}):**")
                plan.tasks.forEach { task ->
                    appendLine()
                    appendLine("**${task.id}. ${task.title}**")
                    appendLine("   ${task.description}")
                }
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º
            AgentResponse.success(
                content = planContent,
                parsedContent = parsedPlan,
                metadata = mapOf(
                    "tokensUsed" to llmResponse.tokensUsed,
                    "provider" to llmProvider.getProviderName(),
                    "tasksCount" to plan.size()
                )
            )

        } catch (e: Exception) {
            logger.error("Error creating task plan", e)
            AgentResponse.error(
                error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                content = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á"
            )
        }
    }

    override fun updateSettings(settings: AgentSettings) {
        logger.info("Updating PlannerAgent settings: $settings")
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        responseSchema = when (settings.defaultResponseFormat) {
            ResponseFormat.JSON -> TaskPlanSchema.createJsonSchema()
            ResponseFormat.XML -> TaskPlanSchema.createXmlSchema()
            ResponseFormat.TEXT -> TaskPlanSchema.createJsonSchema() // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JSON
        }
    }

    override fun dispose() {
        logger.info("Disposing PlannerAgent")
    }

    companion object {
        private val SYSTEM_PROMPT = """
–¢—ã - –∞–≥–µ–Ω—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (PlannerAgent) –≤ —Å–∏—Å—Ç–µ–º–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á.

–ü–†–ê–í–ò–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê:
1. –†–∞–∑–±–∏–≤–∞–π —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
2. –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
3. –§–æ—Ä–º—É–ª–∏—Ä—É–π —á–µ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è ExecutorAgent - –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω–æ
4. –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
5. –ù—É–º–µ—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å 1

–°–¢–†–£–ö–¢–£–†–ê –ü–õ–ê–ù–ê:
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–π —Ü–µ–ª–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- tasks: –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á, –≥–¥–µ –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
  - id: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
  - title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (3-5 —Å–ª–æ–≤)
  - description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
  - prompt: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ExecutorAgent —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

–í–ê–ñ–ù–û:
- ExecutorAgent –ù–ï –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
- –ö–∞–∂–¥—ã–π prompt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ò–∑–±–µ–≥–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        """.trimIndent()
    }
}
