package ru.marslab.ide.ride.agent.impl

import com.intellij.openapi.diagnostic.Logger
import ru.marslab.ide.ride.agent.Agent
import ru.marslab.ide.ride.agent.UncertaintyAnalyzer
import ru.marslab.ide.ride.integration.llm.LLMProvider
import ru.marslab.ide.ride.model.agent.AgentCapabilities
import ru.marslab.ide.ride.model.agent.AgentRequest
import ru.marslab.ide.ride.model.agent.AgentResponse
import ru.marslab.ide.ride.model.agent.AgentSettings
import ru.marslab.ide.ride.formatter.ChatOutputFormatter
import ru.marslab.ide.ride.agent.tools.LLMCodeReviewToolAgent
import ru.marslab.ide.ride.model.orchestrator.TaskType
import ru.marslab.ide.ride.orchestrator.EnhancedAgentOrchestrator

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ChatAgent —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
 * 
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π ChatAgent, –∞ –∫–æ–≥–¥–∞ - EnhancedAgentOrchestrator:
 * - –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí ChatAgent
 * - –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Üí EnhancedAgentOrchestrator
 * - –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ ‚Üí EnhancedAgentOrchestrator.resumePlan
 */
class EnhancedChatAgent(
    private val baseChatAgent: ChatAgent,
    private val orchestrator: EnhancedAgentOrchestrator,
    private val uncertaintyAnalyzer: UncertaintyAnalyzer = UncertaintyAnalyzer
) : Agent {

    private val logger = Logger.getInstance(EnhancedChatAgent::class.java)

    override val capabilities: AgentCapabilities = AgentCapabilities(
        stateful = true,
        streaming = false,
        reasoning = true,
        tools = setOf("orchestration", "user_interaction", "plan_management"),
        systemPrompt = baseChatAgent.capabilities.systemPrompt,
        responseRules = baseChatAgent.capabilities.responseRules + listOf(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞",
            "–í–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
    )

    override suspend fun ask(request: AgentRequest): AgentResponse {
        logger.info("EnhancedChatAgent processing request")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞?
        val resumePlanId = request.context.additionalContext["resume_plan_id"] as? String
        if (resumePlanId != null) {
            logger.info("Resuming plan: $resumePlanId")
            return resumePlanWithInput(resumePlanId, request.request)
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
        val taskComplexity = analyzeTaskComplexity(request.request, request.context)

        return when {
            taskComplexity.isComplex -> {
                logger.info("Complex task detected, using orchestrator")
                useOrchestrator(request)
            }
            else -> {
                logger.info("Simple task, using base ChatAgent")
                baseChatAgent.ask(request)
            }
        }
    }

    override fun updateSettings(settings: AgentSettings) {
        baseChatAgent.updateSettings(settings)
    }

    override fun dispose() {
        baseChatAgent.dispose()
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
     */
    private suspend fun analyzeTaskComplexity(
        request: String,
        context: ru.marslab.ide.ride.model.chat.ChatContext
    ): TaskComplexity {
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        val complexKeywords = listOf(
            "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "–Ω–∞–π–¥–∏ –±–∞–≥–∏", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä",
            "—Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç", "–ø—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä",
            "—Å–∫–∞–Ω–∏—Ä—É–π", "–∏—Å—Å–ª–µ–¥—É–π", "—É–ª—É—á—à–∏"
        )

        val requestLower = request.lowercase()
        val hasComplexKeywords = complexKeywords.any { requestLower.contains(it) }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
        val mentionsFiles = requestLower.contains("—Ñ–∞–π–ª") || 
                           requestLower.contains("–ø—Ä–æ–µ–∫—Ç") ||
                           requestLower.contains("–∫–æ–¥")

        // –î–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É
        val isLongRequest = request.length > 100

        val isComplex = hasComplexKeywords && mentionsFiles || isLongRequest && mentionsFiles

        val taskType = when {
            requestLower.contains("–±–∞–≥") || requestLower.contains("–æ—à–∏–±–∫") -> TaskType.BUG_FIX
            requestLower.contains("–∫–∞—á–µ—Å—Ç–≤") || requestLower.contains("code smell") -> TaskType.CODE_ANALYSIS
            requestLower.contains("–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä") -> TaskType.ARCHITECTURE_ANALYSIS
            requestLower.contains("—Ä–µ—Ñ–∞–∫—Ç–æ—Ä") -> TaskType.REFACTORING
            else -> TaskType.CODE_ANALYSIS
        }

        return TaskComplexity(
            isComplex = isComplex,
            estimatedSteps = if (isComplex) 3 else 1,
            taskType = taskType,
            requiresOrchestration = isComplex
        )
    }

    /**
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
     */
    private suspend fun useOrchestrator(request: AgentRequest): AgentResponse {
        val steps = mutableListOf<String>()
        
        val result = orchestrator.processEnhanced(request) { step ->
            // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–∞—Ö
            val stepInfo = when (step) {
                is ru.marslab.ide.ride.agent.OrchestratorStep.PlanningComplete -> 
                    "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${step.content}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.TaskComplete -> 
                    "üîç –ó–∞–¥–∞—á–∞ ${step.taskId}: ${step.taskTitle}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.AllComplete -> 
                    "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${step.content}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.Error -> 
                    "‚ùå –û—à–∏–±–∫–∞: ${step.error}"
            }
            steps.add(stepInfo)
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        val content = buildString {
            appendLine("## –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            appendLine()
            if (steps.isNotEmpty()) {
                appendLine("### –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:")
                steps.forEach { step ->
                    appendLine("- $step")
                }
                appendLine()
            }
            appendLine(result.content)
        }

        return result.copy(content = content)
    }

    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
     */
    private suspend fun resumePlanWithInput(planId: String, userInput: String): AgentResponse {
        logger.info("Resuming plan $planId with user input")

        val steps = mutableListOf<String>()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å callback
        val result = orchestrator.resumePlanWithCallback(planId, userInput) { step ->
            val stepInfo = when (step) {
                is ru.marslab.ide.ride.agent.OrchestratorStep.PlanningComplete -> 
                    "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${step.content}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.TaskComplete -> 
                    "üîç –ó–∞–¥–∞—á–∞ ${step.taskId}: ${step.taskTitle}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.AllComplete -> 
                    "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${step.content}"
                is ru.marslab.ide.ride.agent.OrchestratorStep.Error -> 
                    "‚ùå –û—à–∏–±–∫–∞: ${step.error}"
            }
            steps.add(stepInfo)
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        val content = buildString {
            appendLine("## ‚úÖ –ü–ª–∞–Ω –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
            appendLine()
            if (steps.isNotEmpty()) {
                appendLine("### –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:")
                steps.forEach { step ->
                    appendLine("- $step")
                }
                appendLine()
            }
            appendLine(result.content)
        }

        return result.copy(
            content = content,
            metadata = result.metadata + mapOf(
                "plan_id" to planId,
                "resumed" to true
            )
        )
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
     */
    private data class TaskComplexity(
        val isComplex: Boolean,
        val estimatedSteps: Int,
        val taskType: TaskType,
        val requiresOrchestration: Boolean
    )

    companion object {
        /**
         * –°–æ–∑–¥–∞—ë—Ç EnhancedChatAgent —Å –±–∞–∑–æ–≤—ã–º ChatAgent –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
         */
        fun create(llmProvider: LLMProvider): EnhancedChatAgent {
            val baseChatAgent = ChatAgent(llmProvider)
            val orchestrator = EnhancedAgentOrchestrator(llmProvider)
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ToolAgents
            registerToolAgents(orchestrator, llmProvider)
            
            return EnhancedChatAgent(baseChatAgent, orchestrator)
        }
        
        /**
         * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ ToolAgents –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
         */
        private fun registerToolAgents(
            orchestrator: EnhancedAgentOrchestrator,
            llmProvider: LLMProvider
        ) {
            val registry = orchestrator.getToolAgentRegistry()
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ Tool Agents –∏–∑ Phase 2
            registry.register(
                ru.marslab.ide.ride.agent.tools.ProjectScannerToolAgent()
            )
            registry.register(
                ru.marslab.ide.ride.agent.tools.CodeChunkerToolAgent()
            )
            registry.register(
                ru.marslab.ide.ride.agent.tools.BugDetectionToolAgent()
            )
            registry.register(
                ru.marslab.ide.ride.agent.tools.CodeQualityToolAgent()
            )
            registry.register(
                ru.marslab.ide.ride.agent.tools.ArchitectureToolAgent()
            )
            registry.register(
                ru.marslab.ide.ride.agent.tools.ReportGeneratorToolAgent()
            )

            // LLM review agent (multi-language)
            registry.register(
                LLMCodeReviewToolAgent(llmProvider)
            )
        }
    }
}
