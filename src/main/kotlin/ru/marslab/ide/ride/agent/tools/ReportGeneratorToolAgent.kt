package ru.marslab.ide.ride.agent.tools

import kotlinx.datetime.Clock
import ru.marslab.ide.ride.agent.BaseToolAgent
import ru.marslab.ide.ride.agent.ValidationResult
import ru.marslab.ide.ride.integration.llm.LLMProvider
import ru.marslab.ide.ride.model.orchestrator.AgentType
import ru.marslab.ide.ride.model.orchestrator.ExecutionContext
import ru.marslab.ide.ride.model.tool.*

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
 * 
 * Capabilities:
 * - markdown_generation - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown
 * - html_generation - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
 * - json_export - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
 * - llm_report - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM
 */
class ReportGeneratorToolAgent(
    private val llmProvider: LLMProvider
) : BaseToolAgent(
    agentType = AgentType.REPORT_GENERATOR,
    toolCapabilities = setOf(
        "markdown_generation",
        "html_generation",
        "json_export",
        "llm_report"
    )
) {
    
    override fun getDescription(): String {
        return "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
    }

    private fun splitObjects(raw: String): List<String> {
        val parts = mutableListOf<String>()
        var depth = 0
        var start = 0
        for ((i, ch) in raw.withIndex()) {
            if (ch == '{') depth++
            if (ch == '}') depth--
            if (depth == 0 && i >= start) {
                val seg = raw.substring(start, i + 1).trim()
                if (seg.startsWith("{") && seg.endsWith("}")) parts.add(seg)
                start = i + 1
                while (start < raw.length && (raw[start] == ',' || raw[start].isWhitespace())) start++
            }
        }
        return parts
    }

    private fun mapToFinding(obj: String): Finding? {
        fun grp(rx: String) = Regex(rx, RegexOption.DOT_MATCHES_ALL).find(obj)?.groupValues?.getOrNull(1)
        val file = grp(""""file"\s*:\s*"(.*?)"""")
        val lineStr = grp(""""line"\s*:\s*(\d+)"""")
        val severityStr = grp(""""severity"\s*:\s*"(.*?)"""")
        val message = grp(""""message"\s*:\s*"(.*?)"""") ?: return null
        val description = grp(""""description"\s*:\s*"(.*?)"""") ?: ""
        val category = grp(""""category"\s*:\s*"(.*?)"""") ?: "general"
        val suggestion = grp(""""suggestion"\s*:\s*"(.*?)"""")
        val severity = try { Severity.valueOf((severityStr ?: "MEDIUM").uppercase()) } catch (_: Exception) { Severity.MEDIUM }
        val line = lineStr?.toIntOrNull() ?: 0
        return Finding(
            file = file ?: "",
            line = line,
            severity = severity,
            category = category,
            message = message,
            description = description,
            suggestion = suggestion
        )
    }
    
    override fun validateInput(input: StepInput): ValidationResult {
        val format = input.getString("format")
        
        if (format.isNullOrEmpty()) {
            return ValidationResult.failure("format is required")
        }
        
        if (format !in listOf("markdown", "html", "json")) {
            return ValidationResult.failure("format must be one of: markdown, html, json")
        }
        
        return ValidationResult.success()
    }
    
    override suspend fun doExecuteStep(step: ToolPlanStep, context: ExecutionContext): StepResult {
        val format = step.input.getString("format") ?: "markdown"
        val useLLM = step.input.getBoolean("use_llm") ?: true
        val title = step.input.getString("title") ?: "–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"
        val explicitFindings = step.input.getList<Finding>("findings") ?: emptyList()
        val metrics = step.input.get<Map<String, Any>>("metrics") ?: emptyMap()

        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ previousResults
        val previousResults = step.input.get<Map<String, Any>>("previousResults") ?: emptyMap()
        
        logger.info("Generating report in $format format (use_llm=$useLLM, previous_results=${previousResults.size})")
        
        val report = if (useLLM && format.lowercase() == "markdown" && previousResults.isNotEmpty()) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —à–∞–≥–æ–≤
            generateLLMReport(previousResults)
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            val aggregatedFromDeps = mutableListOf<Finding>()
            if (previousResults.isNotEmpty()) {
                previousResults.values.forEach { v ->
                    val text = v.toString()
                    val m = Regex("findings=\\[(.*?)]", RegexOption.DOT_MATCHES_ALL).find(text)
                    val arr = m?.groupValues?.getOrNull(1)
                    if (!arr.isNullOrBlank()) {
                        val objs = splitObjects(arr)
                        objs.mapNotNull { obj -> mapToFinding(obj) }.forEach { aggregatedFromDeps.add(it) }
                    }
                }
            }

            val findings = (explicitFindings + aggregatedFromDeps)
            
            when (format.lowercase()) {
                "markdown" -> generateMarkdownReport(title, findings, metrics)
                "html" -> generateHtmlReport(title, findings, metrics)
                "json" -> generateJsonReport(title, findings, metrics)
                else -> return StepResult.error("Unsupported format: $format")
            }
        }
        
        logger.info("Report generated successfully (${report.length} characters)")
        
        return StepResult.success(
            output = StepOutput.of(
                "report" to report,
                "format" to format,
                "size" to report.length
            ),
            metadata = mapOf(
                "generated_at" to Clock.System.now().toString(),
                "used_llm" to useLLM
            )
        )
    }
    
    private fun generateMarkdownReport(title: String, findings: List<Finding>, metrics: Map<String, Any>): String {
        return buildString {
            appendLine("# $title")
            appendLine()
            appendLine("**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** ${Clock.System.now()}")
            appendLine()
            
            // –ú–µ—Ç—Ä–∏–∫–∏
            if (metrics.isNotEmpty()) {
                appendLine("## üìä –ú–µ—Ç—Ä–∏–∫–∏")
                appendLine()
                metrics.forEach { (key, value) ->
                    appendLine("- **${formatKey(key)}:** $value")
                }
                appendLine()
            }
            
            // –°–≤–æ–¥–∫–∞ –ø–æ severity
            if (findings.isNotEmpty()) {
                appendLine("## üìã –°–≤–æ–¥–∫–∞")
                appendLine()
                val bySeverity = findings.groupBy { it.severity }
                Severity.values().forEach { severity ->
                    val count = bySeverity[severity]?.size ?: 0
                    if (count > 0) {
                        val emoji = when (severity) {
                            Severity.CRITICAL -> "üî¥"
                            Severity.HIGH -> "üü†"
                            Severity.MEDIUM -> "üü°"
                            Severity.LOW -> "üîµ"
                            Severity.INFO -> "‚ö™"
                        }
                        appendLine("- $emoji **${severity.name}:** $count")
                    }
                }
                appendLine()
                
                // –î–µ—Ç–∞–ª–∏ –Ω–∞—Ö–æ–¥–æ–∫
                appendLine("## üîç –î–µ—Ç–∞–ª–∏")
                appendLine()
                
                bySeverity.entries.sortedBy { it.key }.forEach { (severity, severityFindings) ->
                    if (severityFindings.isNotEmpty()) {
                        appendLine("### ${severity.name} (${severityFindings.size})")
                        appendLine()
                        
                        severityFindings.forEach { finding ->
                            appendLine("#### ${finding.message}")
                            appendLine()
                            appendLine("- **–§–∞–π–ª:** `${finding.file}`")
                            appendLine("- **–°—Ç—Ä–æ–∫–∞:** ${finding.line}")
                            appendLine("- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${finding.category}")
                            if (finding.description.isNotEmpty()) {
                                appendLine("- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${finding.description}")
                            }
                            if (finding.suggestion != null) {
                                appendLine("- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** ${finding.suggestion}")
                            }
                            appendLine()
                        }
                    }
                }
            } else {
                appendLine("## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç")
                appendLine()
                appendLine("–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                appendLine()
            }
        }
    }
    
    private fun generateHtmlReport(title: String, findings: List<Finding>, metrics: Map<String, Any>): String {
        return buildString {
            appendLine("<!DOCTYPE html>")
            appendLine("<html>")
            appendLine("<head>")
            appendLine("  <meta charset=\"UTF-8\">")
            appendLine("  <title>$title</title>")
            appendLine("  <style>")
            appendLine("    body { font-family: Arial, sans-serif; margin: 20px; }")
            appendLine("    h1 { color: #333; }")
            appendLine("    .metric { margin: 10px 0; }")
            appendLine("    .finding { border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }")
            appendLine("    .critical { border-left: 5px solid #d32f2f; }")
            appendLine("    .high { border-left: 5px solid #f57c00; }")
            appendLine("    .medium { border-left: 5px solid #fbc02d; }")
            appendLine("    .low { border-left: 5px solid #1976d2; }")
            appendLine("    .info { border-left: 5px solid #757575; }")
            appendLine("  </style>")
            appendLine("</head>")
            appendLine("<body>")
            appendLine("  <h1>$title</h1>")
            appendLine("  <p><strong>–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</strong> ${Clock.System.now()}</p>")
            
            if (metrics.isNotEmpty()) {
                appendLine("  <h2>–ú–µ—Ç—Ä–∏–∫–∏</h2>")
                metrics.forEach { (key, value) ->
                    appendLine("  <div class=\"metric\"><strong>${formatKey(key)}:</strong> $value</div>")
                }
            }
            
            if (findings.isNotEmpty()) {
                appendLine("  <h2>–ù–∞—Ö–æ–¥–∫–∏ (${findings.size})</h2>")
                findings.forEach { finding ->
                    val cssClass = finding.severity.name.lowercase()
                    appendLine("  <div class=\"finding $cssClass\">")
                    appendLine("    <h3>${finding.message}</h3>")
                    appendLine("    <p><strong>–§–∞–π–ª:</strong> ${finding.file}</p>")
                    appendLine("    <p><strong>–°—Ç—Ä–æ–∫–∞:</strong> ${finding.line}</p>")
                    appendLine("    <p><strong>Severity:</strong> ${finding.severity}</p>")
                    if (finding.description.isNotEmpty()) {
                        appendLine("    <p>${finding.description}</p>")
                    }
                    if (finding.suggestion != null) {
                        appendLine("    <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> ${finding.suggestion}</p>")
                    }
                    appendLine("  </div>")
                }
            } else {
                appendLine("  <p>‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!</p>")
            }
            
            appendLine("</body>")
            appendLine("</html>")
        }
    }
    
    private fun generateJsonReport(title: String, findings: List<Finding>, metrics: Map<String, Any>): String {
        // –ü—Ä–æ—Å—Ç–∞—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        return buildString {
            appendLine("{")
            appendLine("  \"title\": \"$title\",")
            appendLine("  \"generated_at\": \"${Clock.System.now()}\",")
            appendLine("  \"metrics\": {")
            metrics.entries.forEachIndexed { index, (key, value) ->
                val comma = if (index < metrics.size - 1) "," else ""
                val valueStr = if (value is String) "\"$value\"" else value.toString()
                appendLine("    \"$key\": $valueStr$comma")
            }
            appendLine("  },")
            appendLine("  \"findings\": [")
            findings.forEachIndexed { index, finding ->
                val comma = if (index < findings.size - 1) "," else ""
                appendLine("    {")
                appendLine("      \"file\": \"${finding.file}\",")
                appendLine("      \"line\": ${finding.line},")
                appendLine("      \"severity\": \"${finding.severity}\",")
                appendLine("      \"category\": \"${finding.category}\",")
                appendLine("      \"message\": \"${finding.message}\",")
                appendLine("      \"description\": \"${finding.description}\",")
                appendLine("      \"suggestion\": ${if (finding.suggestion != null) "\"${finding.suggestion}\"" else "null"}")
                appendLine("    }$comma")
            }
            appendLine("  ]")
            appendLine("}")
        }
    }
    
    private fun formatKey(key: String): String {
        return key.split("_").joinToString(" ") { it.capitalize() }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —à–∞–≥–æ–≤
     */
    private suspend fun generateLLMReport(previousResults: Map<String, Any>): String {
        logger.info("Generating LLM report from ${previousResults.size} step results")
        
        val reportPrompt = buildLLMReportPrompt(previousResults)
        
        return try {
            val llmResponse = llmProvider.sendRequest(
                systemPrompt = LLM_REPORT_SYSTEM_PROMPT,
                userMessage = reportPrompt,
                conversationHistory = emptyList(),
                parameters = ru.marslab.ide.ride.model.llm.LLMParameters.BALANCED
            )
            
            if (llmResponse.success) {
                llmResponse.content
            } else {
                logger.error("Failed to generate LLM report: ${llmResponse.error}")
                buildFallbackReport(previousResults)
            }
        } catch (e: Exception) {
            logger.error("Error generating LLM report", e)
            buildFallbackReport(previousResults)
        }
    }
    
    /**
     * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —à–∞–≥–æ–≤
     */
    private fun buildLLMReportPrompt(previousResults: Map<String, Any>): String {
        return buildString {
            appendLine("# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞")
            appendLine()
            
            previousResults.forEach { (stepId, result) ->
                appendLine("## –®–∞–≥: $stepId")
                appendLine()
                
                when (result) {
                    is Map<*, *> -> {
                        val output = result["output"] as? Map<*, *>
                        if (output != null) {
                            // Findings
                            val findings = output["findings"] as? List<*>
                            if (findings != null && findings.isNotEmpty()) {
                                appendLine("**–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:** ${findings.size}")
                                
                                val criticalCount = output["critical_count"] as? Int ?: 0
                                val highCount = output["high_count"] as? Int ?: 0
                                val mediumCount = output["medium_count"] as? Int ?: 0
                                val lowCount = output["low_count"] as? Int ?: 0
                                
                                if (criticalCount + highCount + mediumCount + lowCount > 0) {
                                    appendLine("- –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: $criticalCount")
                                    appendLine("- –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $highCount")
                                    appendLine("- –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $mediumCount")
                                    appendLine("- –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $lowCount")
                                }
                                appendLine()
                                
                                appendLine("**–î–µ—Ç–∞–ª–∏:**")
                                findings.take(10).forEach { finding ->
                                    if (finding is Map<*, *>) {
                                        val message = finding["message"] ?: finding["description"]
                                        val severity = finding["severity"]
                                        val file = finding["file"]
                                        val line = finding["line"]
                                        val suggestion = finding["suggestion"]
                                        
                                        appendLine("- **$message** (–£—Ä–æ–≤–µ–Ω—å: $severity)")
                                        if (file != null) {
                                            appendLine("  - –§–∞–π–ª: `$file${if (line != null) ":$line" else ""}`")
                                        }
                                        if (suggestion != null && suggestion != "") {
                                            appendLine("  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: $suggestion")
                                        }
                                    }
                                }
                                if (findings.size > 10) {
                                    appendLine("- ... –∏ –µ—â–µ ${findings.size - 10} –ø—Ä–æ–±–ª–µ–º(—ã)")
                                }
                            }
                            
                            // Files
                            val totalFiles = output["total_files"] as? Int
                            val totalDirs = output["total_directories"] as? Int
                            if (totalFiles != null) {
                                appendLine("**–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** $totalFiles")
                                if (totalDirs != null) {
                                    appendLine("**–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:** $totalDirs")
                                }
                            }
                            
                            // Architecture
                            val modules = output["modules"] as? List<*>
                            if (modules != null) {
                                appendLine("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π:** ${modules.size}")
                            }
                            
                            val layers = output["layers"] as? List<*>
                            if (layers != null) {
                                appendLine("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–µ–≤:** ${layers.size}")
                            }
                        }
                    }
                    is String -> {
                        appendLine(result)
                    }
                }
                
                appendLine()
            }
            
            appendLine()
            appendLine("# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            appendLine("–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.")
            appendLine()
            appendLine("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞:")
            appendLine("1. **–ó–∞–≥–æ–ª–æ–≤–æ–∫** - –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            appendLine("2. **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ** - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
            appendLine("3. **–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –∞–Ω–∞–ª–∏–∑–∞")
            appendLine("4. **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏** - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            appendLine("5. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
            appendLine("6. **–ó–∞–∫–ª—é—á–µ–Ω–∏–µ** - –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
            appendLine()
            appendLine("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
            appendLine("- –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ (##, ###)")
            appendLine("- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ **–∂–∏—Ä–Ω—ã–π** —Ç–µ–∫—Å—Ç")
            appendLine("- –ò—Å–ø–æ–ª—å–∑—É–π `–∫–æ–¥` –¥–ª—è —Ñ–∞–π–ª–æ–≤")
            appendLine("- –î–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏")
            appendLine("- –ù–ï –≤–∫–ª—é—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM
     */
    private fun buildFallbackReport(previousResults: Map<String, Any>): String {
        return buildString {
            appendLine("# –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            appendLine()
            appendLine("**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** ${Clock.System.now()}")
            appendLine()
            
            appendLine("## –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
            appendLine()
            appendLine("–í—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${previousResults.size} —ç—Ç–∞–ø–æ–≤.")
            appendLine()
            
            appendLine("## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            appendLine()
            
            previousResults.forEach { (stepId, result) ->
                appendLine("### $stepId")
                appendLine()
                
                when (result) {
                    is Map<*, *> -> {
                        val output = result["output"] as? Map<*, *>
                        if (output != null) {
                            val findings = output["findings"] as? List<*>
                            if (findings != null && findings.isNotEmpty()) {
                                appendLine("**–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:** ${findings.size}")
                                appendLine()
                                
                                findings.take(5).forEach { finding ->
                                    if (finding is Map<*, *>) {
                                        val message = finding["message"] ?: finding["description"]
                                        val severity = finding["severity"]
                                        appendLine("- **$message** (–£—Ä–æ–≤–µ–Ω—å: $severity)")
                                    }
                                }
                                if (findings.size > 5) {
                                    appendLine("- ... –∏ –µ—â–µ ${findings.size - 5} –ø—Ä–æ–±–ª–µ–º(—ã)")
                                }
                            } else {
                                appendLine("–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
                            }
                        }
                    }
                    is String -> {
                        appendLine(result)
                    }
                }
                
                appendLine()
            }
            
            appendLine("## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            appendLine()
            appendLine("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ.")
        }
    }
    
    companion object {
        private const val LLM_REPORT_SYSTEM_PROMPT = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç—á–µ—Ç—É:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
- –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–°—Ç–∏–ª—å:
- –ß–µ—Ç–∫–∏–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π
- –§–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ò–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
    }
}
