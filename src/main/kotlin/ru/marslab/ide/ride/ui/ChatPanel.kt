package ru.marslab.ide.ride.ui

import com.intellij.openapi.components.service
import com.intellij.openapi.project.Project
import com.intellij.ui.components.JBScrollPane
import com.intellij.ui.components.JBTextArea
import com.intellij.util.ui.JBUI
import ru.marslab.ide.ride.model.Message
import ru.marslab.ide.ride.model.MessageRole
import ru.marslab.ide.ride.service.ChatService
import ru.marslab.ide.ride.settings.PluginSettings
import java.awt.BorderLayout
import java.awt.Dimension
import java.awt.event.KeyAdapter
import java.awt.event.KeyEvent
import javax.swing.*

/**
 * –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —á–∞—Ç–∞
 */
class ChatPanel(private val project: Project) : JPanel(BorderLayout()) {
    
    private val chatService = service<ChatService>()
    private val settings = service<PluginSettings>()
    
    private val chatHistoryArea: JTextArea
    private val inputArea: JBTextArea
    private val sendButton: JButton
    private val clearButton: JButton
    
    init {
        // –û–±–ª–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chatHistoryArea = JTextArea().apply {
            isEditable = false
            lineWrap = true
            wrapStyleWord = true
            font = font.deriveFont(14f)
        }
        
        val historyScrollPane = JBScrollPane(chatHistoryArea).apply {
            preferredSize = Dimension(400, 400)
        }
        
        // –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        inputArea = JBTextArea().apply {
            lineWrap = true
            wrapStyleWord = true
            rows = 3
            font = font.deriveFont(14f)
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        inputArea.addKeyListener(object : KeyAdapter() {
            override fun keyPressed(e: KeyEvent) {
                if (e.keyCode == KeyEvent.VK_ENTER && !e.isShiftDown) {
                    e.consume()
                    sendMessage()
                }
            }
        })
        
        val inputScrollPane = JBScrollPane(inputArea).apply {
            preferredSize = Dimension(400, 80)
        }
        
        // –ö–Ω–æ–ø–∫–∏
        sendButton = JButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å").apply {
            addActionListener { sendMessage() }
        }
        
        clearButton = JButton("–û—á–∏—Å—Ç–∏—Ç—å").apply {
            addActionListener { clearChat() }
        }
        
        // –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        val buttonPanel = JPanel().apply {
            layout = BoxLayout(this, BoxLayout.X_AXIS)
            add(sendButton)
            add(Box.createHorizontalStrut(5))
            add(clearButton)
        }
        
        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–≤–≤–æ–¥ + –∫–Ω–æ–ø–∫–∏)
        val bottomPanel = JPanel(BorderLayout()).apply {
            border = JBUI.Borders.empty(5)
            add(inputScrollPane, BorderLayout.CENTER)
            add(buttonPanel, BorderLayout.SOUTH)
        }
        
        // –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        add(historyScrollPane, BorderLayout.CENTER)
        add(bottomPanel, BorderLayout.SOUTH)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        loadHistory()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!settings.isConfigured()) {
            appendSystemMessage("‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Tools ‚Üí Ride –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun sendMessage() {
        val text = inputArea.text.trim()
        if (text.isEmpty()) {
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!settings.isConfigured()) {
            JOptionPane.showMessageDialog(
                this,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ Settings ‚Üí Tools ‚Üí Ride",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã",
                JOptionPane.WARNING_MESSAGE
            )
            return
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        inputArea.text = ""
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appendMessage(Message(content = text, role = MessageRole.USER))
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º UI –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        setUIEnabled(false)
        appendSystemMessage("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        chatService.sendMessage(
            userMessage = text,
            project = project,
            onResponse = { message ->
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                removeLastSystemMessage()
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                appendMessage(message)
                setUIEnabled(true)
            },
            onError = { error ->
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                removeLastSystemMessage()
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
                appendSystemMessage("‚ùå –û—à–∏–±–∫–∞: $error")
                setUIEnabled(true)
            }
        )
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
     */
    private fun clearChat() {
        val result = JOptionPane.showConfirmDialog(
            this,
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            JOptionPane.YES_NO_OPTION
        )
        
        if (result == JOptionPane.YES_OPTION) {
            chatService.clearHistory()
            chatHistoryArea.text = ""
            appendSystemMessage("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private fun loadHistory() {
        val history = chatService.getHistory()
        if (history.isNotEmpty()) {
            history.forEach { message ->
                appendMessage(message, addToHistory = false)
            }
        } else {
            appendSystemMessage("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    private fun appendMessage(message: Message, addToHistory: Boolean = true) {
        val prefix = when (message.role) {
            MessageRole.USER -> "üë§ –í—ã"
            MessageRole.ASSISTANT -> "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            MessageRole.SYSTEM -> "‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞"
        }
        
        val text = "$prefix:\n${message.content}\n\n"
        chatHistoryArea.append(text)
        chatHistoryArea.caretPosition = chatHistoryArea.document.length
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private fun appendSystemMessage(text: String) {
        chatHistoryArea.append("‚ÑπÔ∏è $text\n\n")
        chatHistoryArea.caretPosition = chatHistoryArea.document.length
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
     */
    private fun removeLastSystemMessage() {
        val text = chatHistoryArea.text
        val lastSystemIndex = text.lastIndexOf("‚ÑπÔ∏è ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        if (lastSystemIndex != -1) {
            val endIndex = text.indexOf("\n\n", lastSystemIndex)
            if (endIndex != -1) {
                chatHistoryArea.text = text.substring(0, lastSystemIndex) + text.substring(endIndex + 2)
            }
        }
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã
     */
    private fun setUIEnabled(enabled: Boolean) {
        inputArea.isEnabled = enabled
        sendButton.isEnabled = enabled
    }
}
