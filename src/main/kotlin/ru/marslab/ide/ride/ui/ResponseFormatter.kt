package ru.marslab.ide.ride.ui

import com.intellij.openapi.project.Project
import ru.marslab.ide.ride.model.AgentResponse
import ru.marslab.ide.ride.model.Message
import ru.marslab.ide.ride.model.MessageRole
import ru.marslab.ide.ride.model.ParsedResponse
import ru.marslab.ide.ride.service.ChatService
import java.text.DecimalFormat

/**
 * Data class –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML –æ—Ç–≤–µ—Ç–∞
 */
data class UncertaintyResponseData(
    val isFinal: Boolean,
    val uncertainty: Double,
    val message: String,
    val clarifyingQuestions: List<String> = emptyList(),
    val reasoning: String? = null
)

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI —Å —É—á–µ—Ç–æ–º —Å—Ö–µ–º—ã –æ—Ç–≤–µ—Ç–∞
 */
object ResponseFormatter {

    private val percentageFormat = DecimalFormat("#%")

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun extractMainContent(
        content: String,
        message: Message,
        project: Project,
        chatService: ChatService
    ): String {
        println("=== DEBUG: ResponseFormatter.extractMainContent START ===")
        println("Input content length: ${content.length}")
        println("Input content preview: ${content.take(200)}...")

        val format = chatService.getResponseFormat()
        val schema = chatService.getResponseSchema()
        println("Response format: $format")
        println("Response schema: $schema")

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (schema == null || format == null) {
            println("No schema or format, returning raw content")
            return content
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ XML/JSON
        val result = try {
            when (format) {
                ru.marslab.ide.ride.model.ResponseFormat.JSON -> {
                    println("Formatting as JSON")
                    formatJsonContent(content)
                }
                ru.marslab.ide.ride.model.ResponseFormat.XML -> {
                    println("Formatting as XML")
                    formatXmlContent(content)
                }
                else -> {
                    println("Unknown format, returning raw content")
                    content
                }
            }
        } catch (e: Exception) {
            println("=== ERROR: Failed to format content, trying fallback ===")
            println("Error: ${e.message}")

            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ XML
            if (format == ru.marslab.ide.ride.model.ResponseFormat.XML) {
                println("Using fallback XML extraction")
                extractFromMalformedXml(content)
            } else {
                println("Fallback failed, returning raw content")
                content
            }
        }

        println("Result content length: ${result.length}")
        println("Result content preview: ${result.take(200)}...")
        println("=== DEBUG: ResponseFormatter.extractMainContent END ===")
        return result
    }

    /**
     * –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ XML
     */
    private fun extractFromMalformedXml(xmlString: String): String {
        println("DEBUG: Using fallback XML extraction for: ${xmlString.take(100)}...")

        // –ò—â–µ–º<message>—Ç–µ–≥–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        val messageMatch = Regex("""<message[^>]*>(.*?)</message>""", RegexOption.DOT_MATCHES_ALL).find(xmlString)
        if (messageMatch != null) {
            val messageContent = messageMatch.groupValues[1].trim()
                .replace("&lt;", "<")
                .replace("&gt;", ">")
                .replace("&amp;", "&")
                .replace("&quot;", "\"")
                .replace("&apos;", "'")
            println("DEBUG: Extracted message via fallback: ${messageContent.take(100)}...")
            return messageContent
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç<message>—Ç–µ–≥–æ–≤, –∏—â–µ–º –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        val isFinalMatch = Regex("""<isFinal[^>]*>(true|false)</isFinal>""").find(xmlString)
        val isFinal = isFinalMatch?.groupValues?.get(1) == "true"

        if (isFinal) {
            // –î–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            val lines = xmlString.split("\n")
            val contentLines = lines.filter { line ->
                line.trim().isNotEmpty() &&
                !line.trim().startsWith("<") &&
                !line.trim().endsWith(">") &&
                !line.contains("isFinal") &&
                !line.contains("uncertainty")
            }

            if (contentLines.isNotEmpty()) {
                val result = contentLines.joinToString("\n").trim()
                println("DEBUG: Extracted content lines via fallback: ${result.take(100)}...")
                return result
            }
        }

        println("DEBUG: Fallback extraction failed, returning processed XML")
        return xmlString
            .replace("<[^>]+>".toRegex(), "") // –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
            .replace("&lt;", "<")
            .replace("&gt;", ">")
            .replace("&amp;", "&")
            .replace("&quot;", "\"")
            .replace("&apos;", "'")
            .trim()
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     */
    fun formatResponse(
        agentResponse: AgentResponse,
        message: Message,
        project: Project,
        chatService: ChatService
    ): String {
        val format = chatService.getResponseFormat()
        val schema = chatService.getResponseSchema()

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (schema == null || format == null) {
            return agentResponse.content
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return when (val parsed = agentResponse.parsedContent) {
            is ParsedResponse.JsonResponse -> formatJsonResponse(parsed.jsonElement.toString(), agentResponse)
            is ParsedResponse.XmlResponse -> formatXmlResponse(parsed.xmlContent, agentResponse)
            is ParsedResponse.ParseError -> {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${format.name}: ${parsed.error}\n\n${agentResponse.content}"
            }
            else -> agentResponse.content
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
     */
    private fun formatJsonResponse(jsonString: String, agentResponse: AgentResponse): String {
        return try {
            // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val formatted = buildString {
                append("üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                val uncertainty = agentResponse.uncertainty ?: 0.0
                val uncertaintyPercent = percentageFormat.format(uncertainty)

                if (agentResponse.isFinal) {
                    append("‚úÖ **–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${((1 - uncertainty) * 100).toInt()}%)\n\n")
                } else {
                    append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è** (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: $uncertaintyPercent)\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                append("```json\n")
                append(jsonString)
                append("\n```\n")
            }

            formatted
        } catch (e: Exception) {
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞:\n\n${agentResponse.content}"
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
     */
    private fun formatXmlResponse(xmlString: String, agentResponse: AgentResponse): String {
        return try {
            val formatted = buildString {
                append("üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                val uncertainty = agentResponse.uncertainty ?: 0.0
                val uncertaintyPercent = percentageFormat.format(uncertainty)

                if (agentResponse.isFinal) {
                    append("‚úÖ **–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${((1 - uncertainty) * 100).toInt()}%)\n\n")
                } else {
                    append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è** (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: $uncertaintyPercent)\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                append("```xml\n")
                append(xmlString)
                append("\n```\n")
            }

            formatted
        } catch (e: Exception) {
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XML –æ—Ç–≤–µ—Ç–∞:\n\n${agentResponse.content}"
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun extractMainContent(agentResponse: AgentResponse): String {
        return when (val parsed = agentResponse.parsedContent) {
            is ParsedResponse.JsonResponse -> formatJsonContent(parsed.jsonElement.toString())
            is ParsedResponse.XmlResponse -> formatXmlContent(parsed.xmlContent)
            is ParsedResponse.ParseError -> agentResponse.content
            else -> agentResponse.content
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private fun formatJsonContent(jsonString: String): String {
        return try {
            val data = parseUncertaintyResponse(jsonString)
            formatUncertaintyResponse(data)
        } catch (e: Exception) {
            jsonString
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private fun formatXmlContent(xmlString: String): String {
        return try {
            val data = parseXmlResponse(xmlString)
            formatUncertaintyResponse(data)
        } catch (e: Exception) {
            xmlString
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    private fun parseXmlResponse(xmlString: String): UncertaintyResponseData {
        println("DEBUG: Parsing XML response: $xmlString")

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å XML –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        val fixedXml = tryFixMalformedXml(xmlString)
        println("DEBUG: Fixed XML: $fixedXml")

        val isFinal = Regex("""<isFinal[^>]*>(true|false)</isFinal>""").find(fixedXml)?.groupValues?.get(1) == "true"
        val uncertainty = Regex("""<uncertainty[^>]*>([\d.]+)</uncertainty>""").find(fixedXml)?.groupValues?.get(1)?.toDoubleOrNull() ?: 0.0
        val message = Regex("""<message[^>]*>(.*?)</message>""", RegexOption.DOT_MATCHES_ALL).find(fixedXml)?.groupValues?.get(1)?.trim() ?: ""
        println("DEBUG: Extracted message: $message")
        val reasoning = Regex("""<reasoning[^>]*>([^<]+)</reasoning>""").find(fixedXml)?.groupValues?.get(1)?.trim()

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        val clarifyingQuestions = mutableListOf<String>()
        val questionMatches = Regex("""<question[^>]*>([^<]+)</question>""").findAll(fixedXml)
        questionMatches.forEach { match ->
            clarifyingQuestions.add(match.groupValues[1].trim())
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        val finalUncertainty = if (clarifyingQuestions.isNotEmpty()) {
            0.8 // –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        } else {
            uncertainty
        }

        return UncertaintyResponseData(
            isFinal = isFinal,
            uncertainty = finalUncertainty,
            message = message,
            clarifyingQuestions = clarifyingQuestions,
            reasoning = reasoning
        )
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π XML –æ—Ç LLM
     */
    private fun tryFixMalformedXml(xmlString: String): String {
        println("DEBUG: Attempting to fix malformed XML")

        var fixed = xmlString.trim()

        // 1. –ò—â–µ–º XML —Ç–µ–≥–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <response> –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!fixed.contains("<response>", ignoreCase = true)) {
            println("DEBUG: No <response> tag found, trying to wrap content")

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
            val tagPattern = Regex("""<([^/!][^>]*)>(.*?)</\1>""", RegexOption.DOT_MATCHES_ALL)
            val matches = tagPattern.findAll(fixed).toList()

            if (matches.isNotEmpty()) {
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
                val xmlContent = matches.joinToString("\n") { it.value }
                fixed = "<response>\n$xmlContent\n</response>"
                println("DEBUG: Wrapped content in <response> tags")
            } else {
                // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                fixed = """<response>
  <isFinal>true</isFinal>
  <uncertainty>0.0</uncertainty>
  <message>${escapeXml(fixed)}</message>
</response>"""
                println("DEBUG: Created basic response structure")
            }
        }

        // 2. –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        val responseOpenCount = "<response>".toRegex().findAll(fixed).count()
        val responseCloseCount = "</response>".toRegex().findAll(fixed).count()

        if (responseOpenCount > 1) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–∞—Ä—É <response>...</response>
            val firstOpen = fixed.indexOf("<response>")
            val firstClose = fixed.indexOf("</response>", firstOpen)
            if (firstOpen != -1 && firstClose != -1) {
                fixed = fixed.substring(firstOpen, firstClose + "</response>".length)
                println("DEBUG: Removed multiple response elements")
            }
        }

        // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        val allTags = Regex("""<(/?)([^>/]+)(/?)>""").findAll(fixed).toList()
        val tagStack = mutableListOf<String>()

        for (match in allTags) {
            val (fullMatch, slash, tagName, endSlash) = match.destructured
            when {
                slash.isNotEmpty() -> {
                    // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                    if (tagStack.isNotEmpty() && tagStack.last() == tagName) {
                        tagStack.removeAt(tagStack.size - 1)
                    }
                }
                endSlash.isNotEmpty() -> {
                    // –°–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è —Ç–µ–≥ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                }
                else -> {
                    // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                    if (!listOf("br", "hr", "img", "input", "meta", "link").contains(tagName.lowercase())) {
                        tagStack.add(tagName)
                    }
                }
            }
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for (tagName in tagStack.reversed()) {
            fixed += "</$tagName>"
            println("DEBUG: Added missing closing tag: </$tagName>")
        }

        // 4. –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        val responseStart = fixed.indexOf("<response")
        val responseEnd = fixed.lastIndexOf("</response>")

        if (responseStart != -1 && responseEnd != -1) {
            val insideResponse = fixed.substring(responseStart, responseEnd + "</response>".length)
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤–Ω–µ <response>
            val before = fixed.substring(0, responseStart).trim()
            val after = fixed.substring(responseEnd + "</response>".length).trim()

            if (before.isNotEmpty() || after.isNotEmpty()) {
                println("DEBUG: Found text outside response element, removing it")
                fixed = insideResponse
            }
        }

        println("DEBUG: Fixed XML result: $fixed")
        return fixed
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã XML
     */
    private fun escapeXml(text: String): String {
        return text
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace("\"", "&quot;")
            .replace("'", "&apos;")
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    private fun parseUncertaintyResponse(jsonString: String): UncertaintyResponseData {
        val isFinal = Regex(""""isFinal"\s*:\s*(true|false)""").find(jsonString)?.groupValues?.get(1) == "true"
        val uncertainty = Regex(""""uncertainty"\s*:\s*([\d.]+)""").find(jsonString)?.groupValues?.get(1)?.toDoubleOrNull() ?: 0.0
        val message = extractJsonMessage(jsonString)

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        val clarifyingQuestions = mutableListOf<String>()
        val questionsArrayMatch = Regex(""""clarifyingQuestions"\s*:\s*\[([^\]]+)\]""").find(jsonString)
        questionsArrayMatch?.let {
            val questionsContent = it.groupValues[1]
            val questionMatches = Regex(""""([^"]+)"""").findAll(questionsContent)
            questionMatches.forEach { match ->
                clarifyingQuestions.add(match.groupValues[1])
            }
        }

        val reasoning = Regex(""""reasoning"\s*:\s*"([^"]+)""").find(jsonString)?.groupValues?.get(1)

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        val finalUncertainty = if (clarifyingQuestions.isNotEmpty()) {
            0.8 // –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        } else {
            uncertainty
        }

        return UncertaintyResponseData(
            isFinal = isFinal,
            uncertainty = finalUncertainty,
            message = message,
            clarifyingQuestions = clarifyingQuestions,
            reasoning = reasoning
        )
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markdown
     */
    private fun formatUncertaintyResponse(data: UncertaintyResponseData): String {
        return buildString {
            if (data.isFinal) {
                // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                append(data.message)
            } else {
                // –£—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ + –≤–æ–ø—Ä–æ—Å—ã

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (data.message.isNotBlank()) {
                    append(data.message.trim())
                    append("\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                data.reasoning?.let { reasoning ->
                    if (reasoning.isNotBlank()) {
                        append("*$reasoning*\n\n")
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if (data.clarifyingQuestions.isNotEmpty()) {
                    append("**–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:**\n")
                    data.clarifyingQuestions.forEachIndexed { index, question ->
                        append("${index + 1}. $question\n")
                    }
                }

                // –£–±–∏—Ä–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            }
        }.trim()
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ JSON –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun extractJsonMessage(jsonString: String): String {
        // –ò—â–µ–º "message": "..." —Å —É—á–µ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        val pattern = Regex(""""message"\s*:\s*"((?:[^"\\]|\\.)*)"""")
        val match = pattern.find(jsonString)
        return if (match != null) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            match.groupValues[1]
                .replace("\\\"", "\"")
                .replace("\\n", "\n")
                .replace("\\r", "\r")
                .replace("\\t", "\t")
                .replace("\\\\", "\\")
        } else {
            ""
        }
    }
}