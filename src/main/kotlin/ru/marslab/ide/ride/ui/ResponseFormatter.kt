package ru.marslab.ide.ride.ui

import com.intellij.openapi.project.Project
import ru.marslab.ide.ride.model.AgentResponse
import ru.marslab.ide.ride.model.Message
import ru.marslab.ide.ride.model.MessageRole
import ru.marslab.ide.ride.model.ParsedResponse
import ru.marslab.ide.ride.service.ChatService
import java.text.DecimalFormat

/**
 * Data class –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML –æ—Ç–≤–µ—Ç–∞
 */
data class UncertaintyResponseData(
    val isFinal: Boolean,
    val uncertainty: Double,
    val message: String,
    val clarifyingQuestions: List<String> = emptyList(),
    val reasoning: String? = null
)

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI —Å —É—á–µ—Ç–æ–º —Å—Ö–µ–º—ã –æ—Ç–≤–µ—Ç–∞
 */
object ResponseFormatter {

    private val percentageFormat = DecimalFormat("#%")

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun extractMainContent(
        content: String,
        message: Message,
        project: Project,
        chatService: ChatService
    ): String {
        val format = chatService.getResponseFormat()
        val schema = chatService.getResponseSchema()

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (schema == null || format == null) {
            return content
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ XML/JSON
        return when (format) {
            ru.marslab.ide.ride.model.ResponseFormat.JSON -> formatJsonContent(content)
            ru.marslab.ide.ride.model.ResponseFormat.XML -> formatXmlContent(content)
            else -> content
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     */
    fun formatResponse(
        agentResponse: AgentResponse,
        message: Message,
        project: Project,
        chatService: ChatService
    ): String {
        val format = chatService.getResponseFormat()
        val schema = chatService.getResponseSchema()

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (schema == null || format == null) {
            return agentResponse.content
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return when (val parsed = agentResponse.parsedContent) {
            is ParsedResponse.JsonResponse -> formatJsonResponse(parsed.jsonElement.toString(), agentResponse)
            is ParsedResponse.XmlResponse -> formatXmlResponse(parsed.xmlContent, agentResponse)
            is ParsedResponse.ParseError -> {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${format.name}: ${parsed.error}\n\n${agentResponse.content}"
            }
            else -> agentResponse.content
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
     */
    private fun formatJsonResponse(jsonString: String, agentResponse: AgentResponse): String {
        return try {
            // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val formatted = buildString {
                append("üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                val uncertainty = agentResponse.uncertainty ?: 0.0
                val uncertaintyPercent = percentageFormat.format(uncertainty)

                if (agentResponse.isFinal) {
                    append("‚úÖ **–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${((1 - uncertainty) * 100).toInt()}%)\n\n")
                } else {
                    append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è** (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: $uncertaintyPercent)\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                append("```json\n")
                append(jsonString)
                append("\n```\n")
            }

            formatted
        } catch (e: Exception) {
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞:\n\n${agentResponse.content}"
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
     */
    private fun formatXmlResponse(xmlString: String, agentResponse: AgentResponse): String {
        return try {
            val formatted = buildString {
                append("üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                val uncertainty = agentResponse.uncertainty ?: 0.0
                val uncertaintyPercent = percentageFormat.format(uncertainty)

                if (agentResponse.isFinal) {
                    append("‚úÖ **–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${((1 - uncertainty) * 100).toInt()}%)\n\n")
                } else {
                    append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è** (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: $uncertaintyPercent)\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                append("```xml\n")
                append(xmlString)
                append("\n```\n")
            }

            formatted
        } catch (e: Exception) {
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XML –æ—Ç–≤–µ—Ç–∞:\n\n${agentResponse.content}"
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun extractMainContent(agentResponse: AgentResponse): String {
        return when (val parsed = agentResponse.parsedContent) {
            is ParsedResponse.JsonResponse -> formatJsonContent(parsed.jsonElement.toString())
            is ParsedResponse.XmlResponse -> formatXmlContent(parsed.xmlContent)
            is ParsedResponse.ParseError -> agentResponse.content
            else -> agentResponse.content
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private fun formatJsonContent(jsonString: String): String {
        return try {
            val data = parseUncertaintyResponse(jsonString)
            formatUncertaintyResponse(data)
        } catch (e: Exception) {
            jsonString
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private fun formatXmlContent(xmlString: String): String {
        return try {
            val data = parseXmlResponse(xmlString)
            formatUncertaintyResponse(data)
        } catch (e: Exception) {
            xmlString
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    private fun parseXmlResponse(xmlString: String): UncertaintyResponseData {
        val isFinal = Regex("""<isFinal[^>]*>(true|false)</isFinal>""").find(xmlString)?.groupValues?.get(1) == "true"
        val uncertainty = Regex("""<uncertainty[^>]*>([\d.]+)</uncertainty>""").find(xmlString)?.groupValues?.get(1)?.toDoubleOrNull() ?: 0.0
        val message = Regex("""<message[^>]*>([^<]+)</message>""").find(xmlString)?.groupValues?.get(1)?.trim() ?: ""
        val reasoning = Regex("""<reasoning[^>]*>([^<]+)</reasoning>""").find(xmlString)?.groupValues?.get(1)?.trim()

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        val clarifyingQuestions = mutableListOf<String>()
        val questionMatches = Regex("""<question[^>]*>([^<]+)</question>""").findAll(xmlString)
        questionMatches.forEach { match ->
            clarifyingQuestions.add(match.groupValues[1].trim())
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        val finalUncertainty = if (clarifyingQuestions.isNotEmpty()) {
            0.8 // –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        } else {
            uncertainty
        }

        return UncertaintyResponseData(
            isFinal = isFinal,
            uncertainty = finalUncertainty,
            message = message,
            clarifyingQuestions = clarifyingQuestions,
            reasoning = reasoning
        )
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    private fun parseUncertaintyResponse(jsonString: String): UncertaintyResponseData {
        val isFinal = Regex(""""isFinal"\s*:\s*(true|false)""").find(jsonString)?.groupValues?.get(1) == "true"
        val uncertainty = Regex(""""uncertainty"\s*:\s*([\d.]+)""").find(jsonString)?.groupValues?.get(1)?.toDoubleOrNull() ?: 0.0
        val message = Regex(""""message"\s*:\s*"([^"]+)""").find(jsonString)?.groupValues?.get(1) ?: ""

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        val clarifyingQuestions = mutableListOf<String>()
        val questionsArrayMatch = Regex(""""clarifyingQuestions"\s*:\s*\[([^\]]+)\]""").find(jsonString)
        questionsArrayMatch?.let {
            val questionsContent = it.groupValues[1]
            val questionMatches = Regex(""""([^"]+)"""").findAll(questionsContent)
            questionMatches.forEach { match ->
                clarifyingQuestions.add(match.groupValues[1])
            }
        }

        val reasoning = Regex(""""reasoning"\s*:\s*"([^"]+)""").find(jsonString)?.groupValues?.get(1)

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        val finalUncertainty = if (clarifyingQuestions.isNotEmpty()) {
            0.8 // –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        } else {
            uncertainty
        }

        return UncertaintyResponseData(
            isFinal = isFinal,
            uncertainty = finalUncertainty,
            message = message,
            clarifyingQuestions = clarifyingQuestions,
            reasoning = reasoning
        )
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markdown
     */
    private fun formatUncertaintyResponse(data: UncertaintyResponseData): String {
        return buildString {
            if (data.isFinal) {
                // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                append(data.message)
            } else {
                // –£—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ + –≤–æ–ø—Ä–æ—Å—ã

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                append("‚ùì **–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è**\n\n")

                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (data.message.isNotBlank()) {
                    append(data.message.trim())
                    append("\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                data.reasoning?.let { reasoning ->
                    if (reasoning.isNotBlank()) {
                        append("*$reasoning*\n\n")
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if (data.clarifyingQuestions.isNotEmpty()) {
                    append("**–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:**\n")
                    data.clarifyingQuestions.forEachIndexed { index, question ->
                        append("${index + 1}. $question\n")
                    }
                }

                // –£–±–∏—Ä–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            }
        }.trim()
    }
}