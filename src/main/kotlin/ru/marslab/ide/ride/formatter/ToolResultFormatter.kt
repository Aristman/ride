package ru.marslab.ide.ride.formatter

import ru.marslab.ide.ride.model.agent.AgentOutputType
import ru.marslab.ide.ride.model.agent.FormattedOutput
import ru.marslab.ide.ride.model.agent.FormattedOutputBlock

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (MCP Tools)
 */
class ToolResultFormatter {

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    fun formatToolCall(toolName: String, params: Map<String, Any>): FormattedOutputBlock {
        val content = buildString {
            appendLine("–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: **$toolName**")
            appendLine()
            appendLine("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            params.forEach { (key, value) ->
                appendLine("- `$key`: `$value`")
            }
        }

        val metadata = mutableMapOf<String, Any>()
        metadata["toolName"] = toolName
        metadata["params"] = params
        metadata["callTime"] = System.currentTimeMillis()

        return FormattedOutputBlock(
            type = AgentOutputType.TOOL_RESULT,
            content = content,
            cssClasses = listOf("tool-call", "tool-call-block"),
            metadata = metadata,
            order = 0
        )
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    fun formatToolResult(result: Any, success: Boolean): FormattedOutputBlock {
        val content = buildString {
            if (success) {
                appendLine("‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ**")
            } else {
                appendLine("‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**")
            }
            appendLine()
            appendLine("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            appendLine("```")
            appendLine(result.toString())
            appendLine("```")
        }

        val metadata = mutableMapOf<String, Any>()
        metadata["success"] = success
        metadata["result"] = result.toString()
        metadata["completionTime"] = System.currentTimeMillis()

        return FormattedOutputBlock(
            type = AgentOutputType.TOOL_RESULT,
            content = content,
            cssClasses = listOf("tool-result", if (success) "tool-success" else "tool-error"),
            metadata = metadata,
            order = 0
        )
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
     */
    fun formatFileOperation(
        operation: String,
        path: String,
        result: String,
        success: Boolean = true,
        fileSize: Long? = null
    ): FormattedOutput {
        val blocks = mutableListOf<FormattedOutputBlock>()
        var order = 0

        // –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
        val operationIcon = when (operation.lowercase()) {
            "create", "—Å–æ–∑–¥–∞–Ω–∏–µ" -> "üìù"
            "read", "—á—Ç–µ–Ω–∏–µ" -> "üìñ"
            "update", "write", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–∑–∞–ø–∏—Å—å" -> "‚úèÔ∏è"
            "delete", "—É–¥–∞–ª–µ–Ω–∏–µ" -> "üóëÔ∏è"
            "copy", "–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ" -> "üìã"
            "move", "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ" -> "üìÅ"
            else -> "üîß"
        }

        val operationContent = buildString {
            appendLine("$operationIcon **${operation.capitalize()} —Ñ–∞–π–ª–∞**")
            appendLine()
            appendLine("**–ü—É—Ç—å:** `$path`")
            if (fileSize != null) {
                appendLine("**–†–∞–∑–º–µ—Ä:** ${formatFileSize(fileSize)}")
            }
            appendLine("**–°—Ç–∞—Ç—É—Å:** ${if (success) "‚úÖ –£—Å–ø–µ—à–Ω–æ" else "‚ùå –û—à–∏–±–∫–∞"}")
            appendLine()
            appendLine("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
            appendLine(result)
        }

        val operationMetadata = mutableMapOf<String, Any>()
        operationMetadata["operationType"] = operation
        operationMetadata["filePath"] = path
        operationMetadata["success"] = success
        operationMetadata["result"] = result
        if (fileSize != null) {
            operationMetadata["fileSize"] = fileSize
        }

        blocks.add(FormattedOutputBlock(
            type = AgentOutputType.TOOL_RESULT,
            content = operationContent,
            cssClasses = listOf("file-operation", if (success) "file-success" else "file-error"),
            metadata = operationMetadata,
            order = order++
        ))

        // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥, —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
        if (operation.lowercase() in listOf("read", "—á—Ç–µ–Ω–∏–µ") && success && result.trim().isNotEmpty()) {
            val language = detectLanguage(path)
            blocks.add(FormattedOutputBlock.codeBlock(
                content = result,
                language = language,
                order = order++
            ))
        }

        return FormattedOutput.multiple(blocks)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    fun formatFileCreation(path: String, content: String, success: Boolean = true): FormattedOutput {
        val fileSize = content.toByteArray().size.toLong()
        return formatFileOperation("—Å–æ–∑–¥–∞–Ω–∏–µ", path, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", success, fileSize)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    fun formatFileReading(path: String, content: String, success: Boolean = true): FormattedOutput {
        val fileSize = content.toByteArray().size.toLong()
        val result = if (success) "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω" else "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"
        return formatFileOperation("—á—Ç–µ–Ω–∏–µ", path, result, success, fileSize)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    fun formatFileUpdate(path: String, changes: String, success: Boolean = true): FormattedOutput {
        val result = if (success) "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" else "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"
        val blocks = mutableListOf<FormattedOutputBlock>()
        var order = 0

        // –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
        blocks.add(formatFileOperation("–∏–∑–º–µ–Ω–µ–Ω–∏–µ", path, result, success).blocks.first().copy(order = order++))

        // –ë–ª–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (diff –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç)
        if (success && changes.trim().isNotEmpty()) {
            blocks.add(FormattedOutputBlock.codeBlock(
                content = changes,
                language = detectLanguage(path),
                order = order++
            ))
        }

        return FormattedOutput.multiple(blocks)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    fun formatFileDeletion(path: String, success: Boolean = true): FormattedOutput {
        val result = if (success) "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" else "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"
        return formatFileOperation("—É–¥–∞–ª–µ–Ω–∏–µ", path, result, success)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
     */
    fun formatMultipleOperations(
        operations: List<FileOperation>
    ): FormattedOutput {
        val blocks = mutableListOf<FormattedOutputBlock>()
        var order = 0

        operations.forEach { operation ->
            val block = when (operation.type.lowercase()) {
                "create", "—Å–æ–∑–¥–∞–Ω–∏–µ" -> formatFileCreation(operation.path, operation.content ?: "", operation.success)
                "read", "—á—Ç–µ–Ω–∏–µ" -> formatFileReading(operation.path, operation.content ?: "", operation.success)
                "update", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ" -> formatFileUpdate(operation.path, operation.content ?: "", operation.success)
                "delete", "—É–¥–∞–ª–µ–Ω–∏–µ" -> formatFileDeletion(operation.path, operation.success)
                else -> formatFileOperation(operation.type, operation.path, operation.content ?: "", operation.success)
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º order –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
            block.blocks.forEach { it.copy(order = order++) }
            blocks.addAll(block.blocks)
        }

        return FormattedOutput.multiple(blocks)
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    fun formatToolError(toolName: String, errorMessage: String, params: Map<String, Any>? = null): FormattedOutput {
        val content = buildString {
            appendLine("‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: $toolName**")
            appendLine()
            if (params != null && params.isNotEmpty()) {
                appendLine("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                params.forEach { (key, value) ->
                    appendLine("- `$key`: `$value`")
                }
                appendLine()
            }
            appendLine("–û—à–∏–±–∫–∞:")
            appendLine("```")
            appendLine(errorMessage)
            appendLine("```")
        }

        val errorBlock = FormattedOutputBlock(
            type = AgentOutputType.TOOL_RESULT,
            content = content,
            cssClasses = listOf("tool-error", "error-block"),
            metadata = mapOf(
                "toolName" to toolName,
                "error" to errorMessage,
                "success" to false,
                "params" to (params ?: emptyMap())
            ),
            order = 0
        )

        return FormattedOutput.single(errorBlock)
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
     */
    private fun detectLanguage(filePath: String): String {
        val extension = filePath.substringAfterLast('.', "").lowercase()
        return when (extension) {
            "kt", "kts" -> "kotlin"
            "java" -> "java"
            "js", "jsx" -> "javascript"
            "ts", "tsx" -> "typescript"
            "py" -> "python"
            "rs" -> "rust"
            "go" -> "go"
            "cpp", "cxx", "cc" -> "cpp"
            "c" -> "c"
            "cs" -> "csharp"
            "php" -> "php"
            "rb" -> "ruby"
            "swift" -> "swift"
            "scala" -> "scala"
            "sh", "bash", "zsh", "fish" -> "bash"
            "ps1" -> "powershell"
            "bat", "cmd" -> "batch"
            "sql" -> "sql"
            "html" -> "html"
            "css" -> "css"
            "scss", "sass" -> "scss"
            "less" -> "less"
            "xml" -> "xml"
            "json" -> "json"
            "yaml", "yml" -> "yaml"
            "toml" -> "toml"
            "ini" -> "ini"
            "md", "markdown" -> "markdown"
            "dockerfile" -> "dockerfile"
            "gradle" -> "gradle"
            "properties" -> "properties"
            "log" -> "log"
            "txt", "text" -> "text"
            else -> "text"
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     */
    private fun formatFileSize(bytes: Long): String {
        if (bytes < 1024) return "${bytes}B"
        if (bytes < 1024 * 1024) return "${bytes / 1024}KB"
        if (bytes < 1024 * 1024 * 1024) return "${bytes / (1024 * 1024)}MB"
        return "${bytes / (1024 * 1024 * 1024)}GB"
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    data class FileOperation(
        val type: String,
        val path: String,
        val content: String? = null,
        val success: Boolean = true,
        val metadata: Map<String, Any> = emptyMap()
    )
}