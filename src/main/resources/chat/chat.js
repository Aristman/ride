// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å fade-out –∞–Ω–∏–º–∞—Ü–∏–µ–π
window.removeElementWithFade = function(selector) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => {
        el.classList.add('fade-out');
        setTimeout(() => {
            el.remove();
        }, 300); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    });
};

document.addEventListener('click', (e) => {
    const a = e.target.closest('a.code-copy-link');
    if (!a) return;
    e.preventDefault();
    const table = a.closest('table.code-block');
    const code = table && table.querySelector('pre code');
    if (code) {
        try {
            navigator.clipboard.writeText(code.textContent || '');
        } catch (_) {}
    }
});

// Lazy load highlight.js once
window.__ride_initHl = function() {
    if (window.__ride_hlLoaded) return;
    console.log('DEBUG: Initializing highlight.js');

    const addCss = (href) => {
        console.log('DEBUG: Adding CSS', href);
        const l = document.createElement('link');
        l.rel = 'stylesheet';
        l.href = href;
        document.head.appendChild(l);
    };

    const addJs = (src, onload) => {
        console.log('DEBUG: Adding JS', src);
        const s = document.createElement('script');
        s.src = src;
        s.onload = onload;
        document.head.appendChild(s);
    };

    addCss('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css');
    addJs('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js', function() {
        console.log('DEBUG: highlight.js loaded successfully');
        window.__ride_hlLoaded = true;
        window.__ride_highlightAll();
    });
};

window.__ride_highlightAll = function() {
    if (!window.hljs) return;
    document.querySelectorAll('pre code').forEach(function(block) {
        try {
            window.hljs.highlightElement(block);
        } catch (_) {}
    });
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
window.__ride_setBody = function(htmlContent) {
    console.log('DEBUG: JCEF setBody called with HTML length:', htmlContent.length);
    const root = document.getElementById('messages');
    root.innerHTML = htmlContent;

    requestAnimationFrame(() => { window.scrollTo(0, document.body.scrollHeight); });
    console.log('DEBUG: Calling __ride_initHl and __ride_highlightAll');
    window.__ride_initHl && window.__ride_initHl();
    window.__ride_highlightAll && window.__ride_highlightAll();
};

// –î–æ–±–∞–≤–ª—è–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
window.__ride_appendHtml = function(htmlContent) {
    console.log('DEBUG: JCEF appendHtml called with HTML length:', htmlContent.length);
    const tmp = document.createElement('div');
    const htmlStr = htmlContent;
    console.log('DEBUG: HTML string preview:', htmlStr.substring(0, 200));
    tmp.innerHTML = htmlStr;
    console.log('DEBUG: tmp.innerHTML preview:', tmp.innerHTML.substring(0, 200));

    const root = document.getElementById('messages');

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const blocksBefore = root.querySelectorAll('pre code').length;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while (tmp.firstChild) root.appendChild(tmp.firstChild);

    requestAnimationFrame(() => { window.scrollTo(0, document.body.scrollHeight); });
    console.log('DEBUG: Calling __ride_initHl in appendHtml');
    window.__ride_initHl && window.__ride_initHl();

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    const blocksAfter = root.querySelectorAll('pre code');
    console.log('DEBUG: Code blocks before:', blocksBefore, 'after:', blocksAfter.length);

    if (window.hljs && blocksAfter.length > blocksBefore) {
        console.log('DEBUG: Highlighting', (blocksAfter.length - blocksBefore), 'new code blocks');
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ (—Å –∏–Ω–¥–µ–∫—Å–∞ blocksBefore –¥–æ –∫–æ–Ω—Ü–∞)
        for (let i = blocksBefore; i < blocksAfter.length; i++) {
            try {
                console.log('DEBUG: Highlighting block', i);
                window.hljs.highlightElement(blocksAfter[i]);
            } catch(e) {
                console.log('DEBUG: Error highlighting block', i, e);
            }
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ tool agent
window.toggleOutput = function(outputId) {
    console.log('üîó Toggle output clicked:', outputId);

    try {
        const element = document.getElementById(outputId);
        if (!element) {
            console.error('‚ùå Element not found:', outputId);
            return;
        }

        const icon = element.querySelector('.toggle-icon');
        const content = element.querySelector('.output-content');

        if (!icon) {
            console.error('‚ùå Toggle icon element not found');
            return;
        }

        if (!content) {
            console.error('‚ùå Output content element not found');
            return;
        }

        const isExpanded = element.classList.contains('expanded');
        console.log('Current state - Expanded:', isExpanded);

        if (isExpanded) {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            element.classList.remove('expanded');
            element.classList.add('collapsed');
            icon.textContent = '‚ñ∂';
            content.style.display = 'none';
            console.log('üìÅ Collapsed output container');
        } else {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            element.classList.remove('collapsed');
            element.classList.add('expanded');
            icon.textContent = '‚ñº';
            content.style.display = 'block';
            console.log('üìÇ Expanded output container');
        }
    } catch (error) {
        console.error('‚ùå Error toggling output:', error);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ tool agents
document.addEventListener('click', function(event) {
    console.log('üñ±Ô∏è Click detected on element:', event.target.className, event.target.tagName);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const outputHeader = event.target.closest('.output-header');
    if (outputHeader) {
        console.log('‚úÖ Output header found:', outputHeader);
        const outputId = outputHeader.getAttribute('data-output-id');
        console.log('üìã Output ID extracted:', outputId);

        if (outputId && outputId.startsWith('output-')) {
            console.log('üéØ Valid output ID, calling toggleOutput:', outputId);
            event.preventDefault();
            event.stopPropagation();
            if (window.toggleOutput) {
                window.toggleOutput(outputId);
            } else {
                console.error('‚ùå toggleOutput function not found!');
            }
        } else {
            console.warn('‚ö†Ô∏è Invalid output ID:', outputId);
        }
    }
});