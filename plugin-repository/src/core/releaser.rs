use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::process::Command;
use tracing::{info, debug, warn, error};
use chrono::{DateTime, Utc};
use semver::Version;

use crate::git::GitRepository;
use crate::core::llm::agents::{LLMAgentManager, PluginInfo};
use crate::models::release::ReleaseInfo;
use crate::config::parser::ProjectConfig;

/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
pub struct ReleaseManager {
    git_repo: GitRepository,
    agent_manager: LLMAgentManager,
    project_config: ProjectConfig,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º —Ä–µ–ª–∏–∑–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PlannedRelease {
    pub version: String,
    pub version_type: VersionType,
    pub changes_count: usize,
    pub breaking_changes: usize,
    pub estimated_release_date: DateTime<Utc>,
    pub release_notes: Option<String>,
    pub changelog: Option<String>,
}

/// –¢–∏–ø –≤–µ—Ä—Å–∏–∏ –ø–æ semver
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum VersionType {
    Major,
    Minor,
    Patch,
    PreRelease,
}

impl VersionType {
    pub fn increment(&self, current: &str) -> Result<String> {
        let mut version = Version::parse(current)
            .with_context(|| format!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Ä—Å–∏—é: {}", current))?;

        match self {
            VersionType::Major => {
                version.major += 1;
                version.minor = 0;
                version.patch = 0;
            },
            VersionType::Minor => {
                version.minor += 1;
                version.patch = 0;
            },
            VersionType::Patch => {
                version.patch += 1;
            },
            VersionType::PreRelease => {
                version.pre = semver::Prerelease::new("alpha.1")?;
            },
        }

        Ok(version.to_string())
    }

    pub fn from_analysis(analysis: &crate::git::ReleaseAnalysis) -> Self {
        if !analysis.breaking_changes.is_empty() {
            VersionType::Major
        } else if analysis.change_summary.contains_key(&crate::git::ChangeType::Feature) {
            VersionType::Minor
        } else {
            VersionType::Patch
        }
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReleasePreparationResult {
    pub success: bool,
    pub release: PlannedRelease,
    pub warnings: Vec<String>,
    pub errors: Vec<String>,
    pub validation_issues: Vec<String>,
}

impl ReleaseManager {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤
    pub fn new(
        git_repo: GitRepository,
        agent_manager: LLMAgentManager,
        project_config: ProjectConfig,
    ) -> Self {
        Self {
            git_repo,
            agent_manager,
            project_config,
        }
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
    pub async fn suggest_next_version(&self) -> Result<PlannedRelease> {
        info!("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏");

        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
        let (analysis, commits, latest_tag) = self.git_repo.get_changes_since_last_release().await?;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–µ—Ä—Å–∏–∏
        let version_type = VersionType::from_analysis(&analysis);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        let current_version = if let Some(tag) = latest_tag {
            tag.name.strip_prefix('v').unwrap_or(&tag.name).to_string()
        } else {
            "1.0.0".to_string()
        };

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        let suggested_version = version_type.increment(&current_version)
            .unwrap_or_else(|_| format!("{}.0.0", current_version.parse::<Version>().unwrap_or_else(|_| Version::new(1, 0, 0)).major + 1));

        info!("üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {}", current_version);
        info!("üìà –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {} ({:?})", suggested_version, version_type);
        info!("üìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", analysis.total_commits);

        Ok(PlannedRelease {
            version: suggested_version,
            version_type,
            changes_count: analysis.total_commits,
            breaking_changes: analysis.breaking_changes.len(),
            estimated_release_date: Utc::now(),
            release_notes: None,
            changelog: None,
        })
    }

    /// –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    pub async fn prepare_release(&self, version: Option<String>) -> Result<ReleasePreparationResult> {
        info!("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞");

        let mut result = ReleasePreparationResult {
            success: true,
            release: if let Some(v) = version {
                // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                PlannedRelease {
                    version: v.clone(),
                    version_type: VersionType::Patch, // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                    changes_count: 0,
                    breaking_changes: 0,
                    estimated_release_date: Utc::now(),
                    release_notes: None,
                    changelog: None,
                }
            } else {
                // –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                self.suggest_next_version().await?
            },
            warnings: Vec::new(),
            errors: Vec::new(),
            validation_issues: Vec::new(),
        };

        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let (analysis, commits, latest_tag) = self.git_repo.get_changes_since_last_release().await?;

        result.release.changes_count = analysis.total_commits;
        result.release.breaking_changes = analysis.breaking_changes.len();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog
        match self.generate_changelog(&result.release.version, latest_tag.as_ref()).await {
            Ok(changelog) => {
                result.release.changelog = Some(changelog.clone());
                info!("‚úÖ Changelog —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
            },
            Err(e) => {
                result.errors.push(format!("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog: {}", e));
                result.success = false;
            }
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º release notes
        match self.generate_release_notes(&result.release.version, &result.release.changelog).await {
            Ok(notes) => {
                result.release.release_notes = Some(notes.clone());
                info!("‚úÖ Release notes —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            },
            Err(e) => {
                result.warnings.push(format!("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes: {}", e));
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        let validation_result = self.validate_release_readiness(&analysis).await?;
        result.validation_issues = validation_result.issues;

        if validation_result.is_ready {
            info!("‚úÖ –†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
        } else {
            result.warnings.push("–†–µ–ª–∏–∑ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏".to_string());
        }

        Ok(result)
    }

    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑ —Å —Ç–µ–≥–æ–º –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π
    pub async fn create_release(&self, version: &str, message: Option<String>) -> Result<String> {
        info!("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ v{}", version);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.tag_exists(version).await? {
            return Err(anyhow::anyhow!("–¢–µ–≥ v{} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", version));
        }

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥
        let tag_message = message.unwrap_or_else(|| format!("Release v{}", version));

        let output = Command::new("git")
            .args(&["tag", "-a", &format!("v{}", version), "-m", &tag_message])
            .output()
            .context("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞")?;

        if !output.status.success() {
            let error = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!("Git –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞: {}", error));
        }

        info!("‚úÖ –¢–µ–≥ v{} —Å–æ–∑–¥–∞–Ω", version);
        Ok(format!("v{}", version))
    }

    /// –ü—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–ª–∏–∑ (push —Ç–µ–≥–∞)
    pub async fn publish_release(&self, version: &str) -> Result<()> {
        info!("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ v{}", version);

        let output = Command::new("git")
            .args(&["push", "origin", &format!("v{}", version)])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø—É—à–∞ —Ç–µ–≥–∞")?;

        if !output.status.success() {
            let error = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!("Git –æ—à–∏–±–∫–∞ –ø—É—à–∞ —Ç–µ–≥–∞: {}", error));
        }

        info!("‚úÖ –†–µ–ª–∏–∑ v{} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", version);
        Ok(())
    }

    /// –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–ª–∏–∑ (—É–¥–∞–ª—è–µ—Ç —Ç–µ–≥ –ª–æ–∫–∞–ª—å–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–Ω–æ)
    pub async fn rollback_release(&self, version: &str) -> Result<()> {
        warn!("‚è™ –û—Ç–∫–∞—Ç —Ä–µ–ª–∏–∑–∞ v{}", version);

        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥
        let _ = Command::new("git")
            .args(&["tag", "-d", &format!("v{}", version)])
            .output();

        // –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–≥
        let _ = Command::new("git")
            .args(&["push", "origin", "--delete", &format!("v{}", version)])
            .output();

        warn!("‚ö†Ô∏è –†–µ–ª–∏–∑ v{} –æ—Ç–∫–∞—á–µ–Ω", version);
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
    async fn tag_exists(&self, version: &str) -> Result<bool> {
        let tags = self.git_repo.tags.get_all_tags().await?;
        Ok(tags.iter().any(|tag| tag.name == format!("v{}", version)))
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç changelog –¥–ª—è —Ä–µ–ª–∏–∑–∞
    async fn generate_changelog(&self, version: &str, from_tag: Option<&crate::git::GitTag>) -> Result<String> {
        let from_ref = from_tag.map(|t| t.name.as_str());

        self.git_repo.generate_changelog(from_ref, Some("HEAD")).await
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç release notes —á–µ—Ä–µ–∑ LLM
    async fn generate_release_notes(&self, version: &str, changelog: &Option<String>) -> Result<String> {
        let changelog_content = changelog.as_deref().unwrap_or("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π");

        let plugin_info = PluginInfo {
            name: self.project_config.name.clone(),
            id: self.project_config.id.clone(),
            version: version.to_string(),
            description: Some("AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è IntelliJ IDEA".to_string()),
        };

        let notes = self
            .agent_manager
            .generate_release_notes(version, changelog_content, &plugin_info)
            .await?;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ release notes –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π Markdown
        let mut formatted = String::new();
        formatted.push_str(&format!("# {}\n\n", notes.title));
        if !notes.subtitle.is_empty() {
            formatted.push_str(&format!("{}\n\n", notes.subtitle));
        }
        if !notes.highlights.is_empty() {
            formatted.push_str("## Highlights\n");
            for h in notes.highlights {
                formatted.push_str(&format!("- {}\n", h));
            }
            formatted.push('\n');
        }
        formatted.push_str(&notes.body);

        Ok(formatted)
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–ª–∏–∑—É
    async fn validate_release_readiness(&self, analysis: &crate::git::ReleaseAnalysis) -> Result<ReleaseValidationResult> {
        let mut issues = Vec::new();
        let mut is_ready = true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
        if !analysis.breaking_changes.is_empty() {
            info!("üîç –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {}", analysis.breaking_changes.len());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if analysis.total_commits == 0 {
            issues.push("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–ª–∏–∑–∞".to_string());
            is_ready = false;
        } else if analysis.total_commits < 3 {
            issues.push("–ú–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–ª–∏–∑–∞ (–º–µ–Ω–µ–µ 3 –∫–æ–º–º–∏—Ç–æ–≤)".to_string());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        if !self.is_working_tree_clean().await? {
            issues.push("–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Git –Ω–µ —á–∏—Å—Ç–∞".to_string());
            is_ready = false;
        }

        Ok(ReleaseValidationResult {
            is_ready,
            issues,
        })
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∏—Å—Ç–æ—Ç—É —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Git
    async fn is_working_tree_clean(&self) -> Result<bool> {
        let output = Command::new("git")
            .args(&["status", "--porcelain"])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Git")?;

        Ok(String::from_utf8_lossy(&output.stdout).trim().is_empty())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–ª–∏–∑–æ–≤
    pub async fn get_release_history(&self, limit: Option<usize>) -> Result<Vec<ReleaseInfo>> {
        let tags = self.git_repo.tags.get_all_tags().await?;
        let mut releases = Vec::new();

        let limit = limit.unwrap_or(tags.len());

        for (index, tag) in tags.iter().take(limit).enumerate() {
            let release = ReleaseInfo {
                version: tag.name.clone(),
                tag: tag.name.clone(),
                commit: tag.commit_hash.clone(),
                date: tag.date,
                message: Some(tag.commit_message.clone()),
                changes_count: self.count_commits_since_tag(&tag.name).await.unwrap_or(0),
            };

            releases.push(release);
        }

        Ok(releases)
    }

    /// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
    async fn count_commits_since_tag(&self, tag: &str) -> Result<usize> {
        let commits = self.git_repo.history.get_commits_between(Some(tag), None).await?;
        Ok(commits.len())
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReleaseValidationResult {
    pub is_ready: bool,
    pub issues: Vec<String>,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseState {
    Draft,
    Ready,
    Published,
    Failed,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–ª–∏–∑–µ
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CurrentRelease {
    pub state: ReleaseState,
    pub version: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub notes: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_version_increment_major() {
        let v = VersionType::Major.increment("1.2.3").unwrap();
        assert_eq!(v, "2.0.0");
    }

    #[test]
    fn test_version_increment_minor() {
        let v = VersionType::Minor.increment("1.2.3").unwrap();
        assert_eq!(v, "1.3.0");
    }

    #[test]
    fn test_version_increment_patch() {
        let v = VersionType::Patch.increment("1.2.3").unwrap();
        assert_eq!(v, "1.2.4");
    }

    #[test]
    fn test_version_increment_prerelease() {
        let v = VersionType::PreRelease.increment("1.2.3").unwrap();
        assert!(v.starts_with("1.2.3-"));
    }
}