use anyhow::{Result, Context};
use tracing::{info, warn};
use std::fs;
use std::path::{Path, PathBuf};
use walkdir::WalkDir;
use sha2::{Sha256, Digest};
use std::time::Duration;
use xmltree::{Element, XMLNode};
use std::fs::File;

use crate::config::parser::Config;

/// –î–≤–∏–∂–æ–∫ –¥–µ–ø–ª–æ—è
#[derive(Debug, Clone)]
pub struct Deployer {
    config: Config,
}

impl Deployer {
    pub fn new(config: Config) -> Self {
        Self { config }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    pub async fn validate(&self) -> Result<()> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º");
        self.config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    pub async fn deploy(&self, force: bool, rollback_on_failure: bool) -> Result<()> {
        info!("üì¶ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è (force={}, rollback_on_failure={})", force, rollback_on_failure);
        // 1) –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        let artifacts = self.find_artifacts()?;
        if artifacts.is_empty() {
            return Err(anyhow::anyhow!("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è –¥–µ–ø–ª–æ—è"));
        }

        // 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ XML –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–∞ –ø–æ–∑–∂–µ, –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ (merge)

        // 3) –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ XML
        let mut uploaded: Vec<String> = Vec::new();
        let xml_remote = PathBuf::from(&self.config.repository.xml_path);
        let deploy_dir = PathBuf::from(&self.config.repository.deploy_path);

        // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è XML (remote, —Ç–æ–ª—å–∫–æ –¥–ª—è ssh —Ñ–∏—á–∏)
        #[cfg(feature = "ssh")]
        let mut xml_backup_done = false;

        let res: Result<()> = (|| {
            #[cfg(feature = "ssh")]
            {
                // –õ–æ–≥–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                info!(
                    host = %self.config.repository.ssh_host,
                    user = %self.config.repository.ssh_user,
                    deploy_path = %deploy_dir.display(),
                    xml_path = %xml_remote.display(),
                    "SSH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–ª–æ—è"
                );

                let session = self.ssh_connect()?;
                let sftp = session.sftp().context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SFTP —Å–µ—Å—Å–∏—é")?;

                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ XML
                let xml_parent = xml_remote.parent().unwrap_or_else(|| Path::new("/"));
                self.sftp_mkdirs(&sftp, &deploy_dir)?;
                self.sftp_mkdirs(&sftp, xml_parent)?;

                // –ë—ç–∫–∞–ø XML, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if sftp.stat(&xml_remote).is_ok() {
                    use ssh2::RenameFlags;
                    let bak_path = PathBuf::from(format!("{}.bak", xml_remote.display()));
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å OVERWRITE (–µ—Å–ª–∏ .bak —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    match sftp.rename(&xml_remote, &bak_path, Some(RenameFlags::OVERWRITE)) {
                        Ok(_) => {
                            xml_backup_done = true;
                        }
                        Err(e) => {
                            // –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ .bak —Å—É—â–µ—Å—Ç–≤—É–µ—Ç/–º–µ—à–∞–µ—Ç ‚Äî —É–¥–∞–ª–∏–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                            let _ = sftp.unlink(&bak_path);
                            sftp.rename(&xml_remote, &bak_path, Some(RenameFlags::OVERWRITE))
                                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø XML {}: {}", xml_remote.display(), e))?;
                            xml_backup_done = true;
                        }
                    }

                }
                // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                for art in &artifacts {
                    let file_name = art.file_name().unwrap().to_string_lossy().to_string();
                    let remote_path = deploy_dir.join(&file_name);
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º SCP
                    match self.scp_upload(&session, art, &remote_path) {
                        Ok(_) => {}
                        Err(e) => {
                            warn!("SCP –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {}: {} ‚Äî –ø—Ä–æ–±—É–µ–º SFTP", remote_path.display(), e);
                            // –§–æ–ª–ª–±–µ–∫ –Ω–∞ SFTP
                            match self.sftp_upload(&sftp, art, &remote_path) {
                                Ok(_) => {}
                                Err(e) => {
                                    warn!("SFTP –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {}: {}", remote_path.display(), e);
                                    return Err(anyhow::anyhow!("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ {} –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", remote_path.display(), e));
                                }
                            }
                        }
                    }
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                    let local_size = fs::metadata(art)?.len();
                    let remote_md = sftp.stat(&remote_path)
                        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {}", remote_path.display()))?;
                    if remote_md.size.unwrap_or(0) != local_size as u64 {
                        anyhow::bail!("–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è {}", remote_path.display());
                    }
                }

                // –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ XML: —á–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –º—ë—Ä–¥–∂–∏–º –Ω–æ–≤—ã–µ –ø–ª–∞–≥–∏–Ω—ã –ø–æ id, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –Ω–∞ id
                let merged_xml = self.build_merged_repository_xml_ssh(&sftp, &xml_remote, &artifacts)?;
                // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ rename
                self.remote_atomic_update_xml(&sftp, &xml_remote, &merged_xml)?;
            }
            #[cfg(not(feature = "ssh"))]
            {
                warn!("SSH –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç–µ feature 'ssh' –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è.");
                // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–∑–¥–∞–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π XML —Ä—è–¥–æ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç–µ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                let local_xml = Path::new("./target/mock").join(xml_remote.file_name().unwrap_or_default());
                std::fs::create_dir_all(local_xml.parent().unwrap()).ok();
                let merged_xml = self.build_repository_xml(&artifacts)?;
                self.atomic_update_xml(&local_xml, &merged_xml)?;
            }
            Ok(())
        })();

        if let Err(e) = res {
            warn!("–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {}", e);
            if rollback_on_failure {
                let _ = self.rollback_uploaded(uploaded);
                #[cfg(feature = "ssh")]
                {
                    // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å xml –∏–∑ .bak
                    if let Ok(session) = self.ssh_connect() {
                        if let Ok(sftp) = session.sftp() {
                            let bak_path = PathBuf::from(format!("{}.bak", xml_remote.display()));
                            let _ = sftp.rename(&bak_path, &xml_remote, None);
                        }
                    }
                }
            }
            return Err(e);
        }

        info!("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }

    /// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pub async fn rollback(&self) -> Result<()> {
        warn!("‚è™ –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (–∑–∞–≥–ª—É—à–∫–∞)");
        Ok(())
    }

    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn ssh_connect(&self) -> Result<ssh2::Session> {
        use std::net::{TcpStream, ToSocketAddrs};
        use anyhow::bail;

        let host = &self.config.repository.ssh_host;
        let user = &self.config.repository.ssh_user;

        // –¢–∞–π–º–∞—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/IO
        let connect_timeout = Duration::from_secs(15);
        let io_timeout = Duration::from_secs(30);

        // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        let addr = format!("{}:22", host)
            .to_socket_addrs()
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–¥—Ä–µ—Å {}:22", host))?
            .next()
            .ok_or_else(|| anyhow::anyhow!("DNS –Ω–µ –≤–µ—Ä–Ω—É–ª –∞–¥—Ä–µ—Å –¥–ª—è {}:22", host))?;

        let stream = TcpStream::connect_timeout(&addr, connect_timeout)
            .with_context(|| format!("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {}", addr))?;
        stream.set_read_timeout(Some(io_timeout)).ok();
        stream.set_write_timeout(Some(io_timeout)).ok();

        let mut session = ssh2::Session::new().context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Å–µ—Å—Å–∏—é")?;
        session.set_tcp_stream(stream);
        session.handshake().context("–û—à–∏–±–∫–∞ SSH —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è")?;

        if let Some(key_path) = &self.config.repository.ssh_private_key_path {
            session.userauth_pubkey_file(user, None, Path::new(key_path), None)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–ª—é—á–æ–º: {}", key_path))?;
        } else {
            bail!("ssh_private_key_path –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        }

        if !session.authenticated() {
            bail!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ");
        }

        Ok(session)
    }

    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ SFTP (–∞–Ω–∞–ª–æ–≥ mkdir -p)
    #[cfg(feature = "ssh")]
    fn sftp_mkdirs(&self, sftp: &ssh2::Sftp, path: &Path) -> Result<()> {
        use std::path::Component;
        let mut cur = PathBuf::new();
        for comp in path.components() {
            match comp {
                Component::RootDir => cur.push(Path::new("/")),
                Component::Normal(seg) => {
                    cur.push(seg);
                    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    if let Err(e) = sftp.mkdir(&cur, 0o775) {
                        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º stat, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞
                        if sftp.stat(&cur).is_err() {
                            return Err(anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {}: {}", cur.display(), e));
                        }
                    }
                },
                _ => {}
            }
        }
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ SCP (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn scp_upload(&self, session: &ssh2::Session, local: &Path, remote: &Path) -> Result<()> {
        use std::io::Read;
        let mut file = std::fs::File::open(local)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {}", local.display()))?;
        let metadata = file.metadata().context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞")?;

        let mut channel = session.scp_send(remote, 0o644, metadata.len(), None)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SCP –¥–ª—è {}", remote.display()))?;

        std::io::copy(&mut file, &mut channel)
            .with_context(|| format!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {}", local.display()))?;
        channel.send_eof().ok();
        channel.wait_eof().ok();
        channel.wait_close().ok();
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ SFTP (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn sftp_upload(&self, sftp: &ssh2::Sftp, local: &Path, remote: &Path) -> Result<()> {
        use std::io::{Read, Write};
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        let mut src = std::fs::File::open(local)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {}", local.display()))?;
        // –°–æ–∑–¥–∞—ë–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π
        let mut dst = sftp.create(remote)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ SFTP: {}", remote.display()))?;
        // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        let mut buf = [0u8; 64 * 1024];
        loop {
            let n = src.read(&mut buf)?;
            if n == 0 { break; }
            dst.write_all(&buf[..n])?;
        }
        dst.flush().ok();
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (feature "ssh"), –±–µ–∑–æ–ø–∞—Å–Ω—ã–π no-op –±–µ–∑ —Ñ–∏—á–∏
    pub fn upload_artifact<P: AsRef<Path>>(&self, local: P, remote: P) -> Result<()> {
        #[cfg(feature = "ssh")]
        {
            let session = self.ssh_connect()?;
            self.scp_upload(&session, local.as_ref(), remote.as_ref())
        }
        #[cfg(not(feature = "ssh"))]
        {
            // –ë–µ–∑ —Ñ–∏—á–∏ ssh –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∞
            tracing::info!("SSH –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ —Ñ–∏—á—É 'ssh' –≤ Cargo)");
            Ok(())
        }
    }

    /// –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SFTP (feature "ssh")
    #[cfg(feature = "ssh")]
    fn remote_atomic_update_xml(&self, sftp: &ssh2::Sftp, xml_remote: &Path, content: &str) -> Result<()> {
        use std::io::Write;
        // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        let dir = xml_remote.parent().unwrap_or_else(|| Path::new("."));
        let tmp_remote = dir.join(format!("{}.tmp", xml_remote.file_name().and_then(|n| n.to_str()).unwrap_or("updatePlugins.xml")));
        // –∑–∞–ø–∏—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        {
            let mut file = sftp.create(&tmp_remote)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {}", tmp_remote.display()))?;
            file.write_all(content.as_bytes())
                .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ")?;
            file.flush().ok();
        }
        // rename –ø–æ–≤–µ—Ä—Ö —Ü–µ–ª–µ–≤–æ–≥–æ
        sftp.rename(&tmp_remote, xml_remote, None)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π XML {}", xml_remote.display()))?;
        Ok(())
    }

    /// –ß–∏—Ç–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π updatePlugins.xml –ø–æ SFTP –µ—Å–ª–∏ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ String
    #[cfg(feature = "ssh")]
    fn read_remote_xml(&self, sftp: &ssh2::Sftp, xml_remote: &Path) -> Option<String> {
        use std::io::Read;
        // 1) –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        if let Ok(mut f) = sftp.open(xml_remote) {
            let mut buf = String::new();
            if f.read_to_string(&mut buf).is_ok() {
                return Some(buf);
            }
        }
        // 2) –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ .bak), –ø—Ä–æ–±—É–µ–º .bak
        let bak = PathBuf::from(format!("{}.bak", xml_remote.display()));
        if let Ok(mut f) = sftp.open(&bak) {
            let mut buf = String::new();
            if f.read_to_string(&mut buf).is_ok() {
                return Some(buf);
            }
        }
        None
    }

    /// –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π updatePlugins.xml: –º—ë—Ä–¥–∂–∏—Ç —Ç–µ–∫—É—â–∏–π XML —Å –Ω–æ–≤—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏.
    /// –ü—Ä–∞–≤–∏–ª–∞: –ø–æ id –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É (–ø–æ—Å–ª–µ–¥–Ω—é—é) –≤–µ—Ä—Å–∏—é; –æ—Å—Ç–∞–ª—å–Ω—ã–µ id —Å–æ—Ö—Ä–∞–Ω—è–µ–º.
    #[cfg(feature = "ssh")]
    fn build_merged_repository_xml_ssh(
        &self,
        sftp: &ssh2::Sftp,
        xml_remote: &Path,
        artifacts: &[PathBuf],
    ) -> Result<String> {
        // –ë–∞–∑–æ–≤—ã–π URL –∫–∞—Ç–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –≤ repository.url —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª XML ‚Äî –æ—Ç—Ä–µ–∑–∞–µ–º –µ–≥–æ)
        let mut base_dir_url = self.config.repository.url.trim_end_matches('/').to_string();
        if base_dir_url.ends_with(".xml") {
            if let Some(pos) = base_dir_url.rfind('/') { base_dir_url.truncate(pos); }
        }
        let repo_root_fs = Path::new(&self.config.repository.xml_path)
            .parent()
            .unwrap_or_else(|| Path::new("/"));
        let deploy_fs = Path::new(&self.config.repository.deploy_path);
        let rel_path = deploy_fs
            .strip_prefix(repo_root_fs)
            .ok()
            .and_then(|p| {
                let s = p.components()
                    .map(|c| c.as_os_str().to_string_lossy())
                    .collect::<Vec<_>>()
                    .join("/");
                if s.is_empty() { None } else { Some(s) }
            });

        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π XML
        let existing_raw_opt = self.read_remote_xml(sftp, xml_remote);

        // –ü–æ–ø—ã—Ç–∫–∞ DOM-–ø–∞—Ä—Å–∏–Ω–≥–∞
        if let Some(existing_raw) = existing_raw_opt.clone() {
            if let Ok(mut root) = Element::parse(existing_raw.as_bytes()) {
                // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É id -> —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–µ id)
                let current_id = &self.config.project.id;
                let mut new_children: Vec<XMLNode> = Vec::new();
                for ch in &root.children {
                    if let XMLNode::Element(el) = ch {
                        if el.name == "plugin" {
                            let id_attr = el.attributes.get("id").cloned();
                            if let Some(id) = id_attr {
                                if id == *current_id { continue; }
                            }
                        }
                    }
                    new_children.push(ch.clone());
                }

                // –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏ URL
                let mut arts = artifacts.to_vec();
                arts.sort();
                let art = arts.last().unwrap();
                let file_name = art.file_name().unwrap().to_string_lossy().to_string();
                let url = match rel_path {
                    Some(rel) => format!("{}/{}/{}", base_dir_url, rel, file_name),
                    None => format!("{}/{}", base_dir_url, file_name),
                };
                let version = self.extract_version_from_filename(&file_name).unwrap_or_else(|| "0.0.0".to_string());

                let mut plugin_el = Element::new("plugin");
                plugin_el.attributes.insert("id".to_string(), current_id.clone());
                plugin_el.attributes.insert("url".to_string(), url);
                plugin_el.attributes.insert("version".to_string(), version);

                // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ ZIP
                let zip_meta = self.extract_meta_from_zip(art).ok();

                // name ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ -> –∏–∑ ZIP -> –∏–∑ project.name
                let mut have_name = false;
                if let Some(existing_el) = self.find_existing_plugin_by_id(&root, current_id) {
                    for child in &existing_el.children {
                        if let XMLNode::Element(cel) = child {
                            if cel.name == "name" { have_name = true; }
                        }
                    }
                }
                if !have_name {
                    if let Some(meta) = &zip_meta {
                        if let Some(n) = &meta.name { self.push_text_child(&mut plugin_el, "name", n); }
                        else { self.push_text_child(&mut plugin_el, "name", &self.config.project.name); }
                    } else {
                        self.push_text_child(&mut plugin_el, "name", &self.config.project.name);
                    }
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º vendor/idea-version/description –∏–∑ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ id –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                if let Some(existing_el) = self.find_existing_plugin_by_id(&root, current_id) {
                    for child in existing_el.children {
                        if let XMLNode::Element(mut cel) = child {
                            if cel.name == "vendor" || cel.name == "idea-version" || cel.name == "description" {
                                plugin_el.children.push(XMLNode::Element(cel));
                            }
                        }
                    }
                }

                // –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ ZIP-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
                if let Some(meta) = zip_meta {
                    if plugin_el.get_child("vendor").is_none() {
                        if let Some(v) = meta.vendor { self.push_text_child(&mut plugin_el, "vendor", &v); }
                    }
                    if plugin_el.get_child("idea-version").is_none() {
                        if meta.since_build.is_some() || meta.until_build.is_some() {
                            let mut iv = Element::new("idea-version");
                            if let Some(s) = meta.since_build { iv.attributes.insert("since-build".to_string(), s); }
                            if let Some(u) = meta.until_build { iv.attributes.insert("until-build".to_string(), u); }
                            plugin_el.children.push(XMLNode::Element(iv));
                        }
                    }
                    if plugin_el.get_child("description").is_none() {
                        if let Some(d) = meta.description { self.push_cdata_child(&mut plugin_el, "description", &d); }
                    }
                }

                new_children.push(XMLNode::Element(plugin_el));
                root.children = new_children;

                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–æ—Ä–µ–Ω—å
                let mut buf = Vec::new();
                root.write(&mut buf).with_context(|| "–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è updatePlugins.xml –Ω–µ —É–¥–∞–ª–∞—Å—å")?;
                return Ok(String::from_utf8(buf).unwrap_or_else(|v| String::from_utf8_lossy(&v.into_bytes()).to_string()));
            }
        }

        // Fallback: DOM-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫–æ–≤—É—é –∑–∞–º–µ–Ω—É/–≤—Å—Ç–∞–≤–∫—É
        let current_id = &self.config.project.id;
        let mut arts = artifacts.to_vec();
        arts.sort();
        let art = arts.last().unwrap();
        let file_name = art.file_name().unwrap().to_string_lossy().to_string();
        let url = match rel_path {
            Some(rel) => format!("{}/{}/{}", base_dir_url, rel, file_name),
            None => format!("{}/{}", base_dir_url, file_name),
        };
        let version = self.extract_version_from_filename(&file_name).unwrap_or_else(|| "0.0.0".to_string());

        let plugin_snippet = format!(
            "<plugin id=\"{}\" url=\"{}\" version=\"{}\"><name>{}</name></plugin>",
            current_id, url, version, self.config.project.name
        );

        if let Some(mut existing_raw) = existing_raw_opt {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ id ‚Äî –∑–∞–º–µ–Ω–∏–º –µ—ë —á–µ—Ä–µ–∑ regex, –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ–¥ </plugins>
            let pattern = format!(
                "<plugin\\b[^>]*\\bid=\\\"{}\\\"[^>]*>.*?</plugin>",
                regex::escape(current_id)
            );
            let re = regex::RegexBuilder::new(&pattern)
                .dot_matches_new_line(true)
                .build()
                .ok();
            if let Some(re) = re {
                if re.is_match(&existing_raw) {
                    existing_raw = re.replace(&existing_raw, plugin_snippet.as_str()).to_string();
                } else if let Some(pos) = existing_raw.rfind("</plugins>") {
                    existing_raw.insert_str(pos, &plugin_snippet);
                } else {
                    // –Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–±–∞–≤–∏–º
                    existing_raw.push_str(&plugin_snippet);
                }
            }
            return Ok(existing_raw);
        } else {
            // –§–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ ‚Äî —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
            let content = format!("<?xml version=\"1.0\" encoding=\"UTF-8\"?><plugins>{}</plugins>", plugin_snippet);
            return Ok(content);
        }
    }

    /// –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ plugin –ø–æ id
    #[cfg(feature = "ssh")]
    fn find_existing_plugin_by_id<'a>(&self, root: &'a Element, id: &str) -> Option<Element> {
        for ch in &root.children {
            if let XMLNode::Element(el) = ch {
                if el.name == "plugin" {
                    if let Some(existing_id) = el.attributes.get("id") {
                        if existing_id == id { return Some(el.clone()); }
                    }
                }
            }
        }
        None
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ zip –≤–∏–¥–∞ name-1.2.3.zip
    fn extract_version_from_filename(&self, filename: &str) -> Option<String> {
        let re = regex::Regex::new(r"-(\d+\.\d+\.\d+(?:-[A-Za-z0-9.]+)*)\.zip$").ok()?;
        if let Some(caps) = re.captures(filename) { Some(caps.get(1).unwrap().as_str().to_string()) } else { None }
    }

    /// –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–º–µ–Ω–∞
    pub fn atomic_update_xml<P: AsRef<Path>>(&self, xml_path: P, content: &str) -> Result<()> {
        let xml_path = xml_path.as_ref();
        let dir = xml_path.parent().unwrap_or_else(|| Path::new("."));

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã rename –±—ã–ª –∞—Ç–æ–º–∞—Ä–Ω—ã–º –Ω–∞ –æ–¥–Ω–æ–º FS
        let mut tmp_path = PathBuf::from(dir);
        let file_name = xml_path
            .file_name()
            .and_then(|n| n.to_str())
            .unwrap_or("updatePlugins.xml");
        tmp_path.push(format!("{}.tmp", file_name));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ –¥–∏—Å–∫
        fs::write(&tmp_path, content)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML: {}", tmp_path.display()))?;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤–µ—Ä—Ö —Ü–µ–ª–µ–≤–æ–≥–æ (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–∞ –æ–¥–Ω–æ–º FS)
        fs::rename(&tmp_path, xml_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å XML {}", xml_path.display()))?;

        Ok(())
    }

    /// –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è (zip) –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å–±–æ—Ä–∫–∏
    fn find_artifacts(&self) -> Result<Vec<PathBuf>> {
        let out_dir = PathBuf::from(&self.config.build.output_dir);
        let mut files = Vec::new();
        for entry in WalkDir::new(&out_dir).into_iter().filter_map(|e| e.ok()) {
            if entry.metadata().map(|m| m.is_file()).unwrap_or(false) {
                let p = entry.path();
                if p.extension().and_then(|e| e.to_str()) == Some("zip") {
                    files.push(p.to_path_buf());
                }
            }
        }
        Ok(files)
    }

    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ XML –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    fn build_repository_xml(&self, artifacts: &[PathBuf]) -> Result<String> {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö sha256
        let mut items = String::new();
        for p in artifacts {
            let name = p.file_name().unwrap().to_string_lossy();
            let sha = self.sha256_file(p)?;
            items.push_str(&format!("    <plugin file=\"{}\" sha256=\"{}\"/>\n", name, sha));
        }
        let xml = format!(
            "<plugins>\n{}\n</plugins>",
            items
        );
        Ok(xml)
    }

    fn sha256_file(&self, path: &Path) -> Result<String> {
        let mut file = std::fs::File::open(path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ö–µ—à–∞: {}", path.display()))?;
        let mut hasher = Sha256::new();
        std::io::copy(&mut file, &mut hasher).context("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö–µ—à–∞")?;
        let digest = hasher.finalize();
        Ok(format!("{:x}", digest))
    }

    /// –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏ ssh ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    fn rollback_uploaded(&self, remote_paths: Vec<String>) {
        #[cfg(feature = "ssh")]
        {
            if let Ok(session) = self.ssh_connect() {
                if let Ok(sftp) = session.sftp() {
                    for p in remote_paths {
                        let _ = sftp.unlink(Path::new(&p));
                    }
                }
            }
        }
        #[cfg(not(feature = "ssh"))]
        {
            let _ = remote_paths; // no-op
        }
    }

    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    fn push_text_child(&self, parent: &mut Element, name: &str, text: &str) {
        let mut el = Element::new(name);
        el.children.push(XMLNode::Text(text.to_string()));
        parent.children.push(XMLNode::Element(el));
    }

    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π: –¥–æ–±–∞–≤–∏—Ç—å CDATA
    fn push_cdata_child(&self, parent: &mut Element, name: &str, text: &str) {
        let mut el = Element::new(name);
        el.children.push(XMLNode::CData(text.to_string()));
        parent.children.push(XMLNode::Element(el));
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ META-INF/plugin.xml –≤–Ω—É—Ç—Ä–∏ ZIP
    fn extract_meta_from_zip(&self, zip_path: &Path) -> Result<PluginMeta> {
        let file = File::open(zip_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ZIP {}", zip_path.display()))?;
        let mut archive = zip::ZipArchive::new(file)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ZIP {}", zip_path.display()))?;
        let mut entry = archive
            .by_name("META-INF/plugin.xml")
            .with_context(|| "–í ZIP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç META-INF/plugin.xml")?;
        use std::io::Read;
        let mut xml = String::new();
        entry.read_to_string(&mut xml).with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å META-INF/plugin.xml –∏–∑ ZIP")?;
        let root = Element::parse(xml.as_bytes()).with_context(|| "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ META-INF/plugin.xml –∏–∑ ZIP")?;

        let name = root.get_child("name").and_then(|e| e.get_text()).map(|s| s.to_string());
        let vendor = root.get_child("vendor").and_then(|e| e.get_text()).map(|s| s.to_string());
        let description = root.get_child("description").and_then(|e| {
            // –°–æ–±–µ—Ä–µ–º CDATA/—Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫—É
            let mut acc = String::new();
            for ch in &e.children {
                match ch {
                    XMLNode::Text(t) | XMLNode::CData(t) => { acc.push_str(t); },
                    _ => {}
                }
            }
            if acc.is_empty() { None } else { Some(acc) }
        });
        let idea = root.get_child("idea-version");
        let since_build = idea.and_then(|e| e.attributes.get("since-build").cloned());
        let until_build = idea.and_then(|e| e.attributes.get("until-build").cloned());

        Ok(PluginMeta { name, vendor, description, since_build, until_build })
    }

}

#[derive(Debug, Clone)]
struct PluginMeta {
    name: Option<String>,
    vendor: Option<String>,
    description: Option<String>,
    since_build: Option<String>,
    until_build: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_deployer_validate() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.validate().await; // –¥–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        }
    }

    #[tokio::test]
    async fn test_deployer_deploy_and_rollback() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.deploy(false, true).await;
            let _ = d.rollback().await;
        }
    }

    #[test]
    fn test_atomic_update_xml() {
        let tmpdir = tempfile::tempdir().expect("tempdir");
        let xml_path = tmpdir.path().join("updatePlugins.xml");
        // –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        fs::write(&xml_path, "<plugins></plugins>").expect("write initial");

        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            d.atomic_update_xml(&xml_path, "<plugins><plugin id=\"x\"/></plugins>")
                .expect("atomic update");
            let updated = fs::read_to_string(&xml_path).expect("read updated");
            assert!(updated.contains("plugin id=\"x\""));
        }
    }
}