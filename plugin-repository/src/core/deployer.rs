use anyhow::{Result, Context};
use tracing::{info, warn};
use std::fs;
use std::path::{Path, PathBuf};
use walkdir::WalkDir;
use sha2::{Sha256, Digest};

use crate::config::parser::Config;

/// –î–≤–∏–∂–æ–∫ –¥–µ–ø–ª–æ—è
#[derive(Debug, Clone)]
pub struct Deployer {
    config: Config,
}

impl Deployer {
    pub fn new(config: Config) -> Self {
        Self { config }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    pub async fn validate(&self) -> Result<()> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º");
        self.config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    pub async fn deploy(&self, force: bool, rollback_on_failure: bool) -> Result<()> {
        info!("üì¶ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è (force={}, rollback_on_failure={})", force, rollback_on_failure);
        // 1) –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        let artifacts = self.find_artifacts()?;
        if artifacts.is_empty() {
            return Err(anyhow::anyhow!("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è –¥–µ–ø–ª–æ—è"));
        }

        // 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ XML (—É–ø—Ä–æ—Å—Ç–∏–º: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫)
        let xml_content = self.build_repository_xml(&artifacts)?;

        // 3) –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ XML
        let mut uploaded: Vec<String> = Vec::new();
        let xml_remote = PathBuf::from(&self.config.repository.xml_path);
        let deploy_dir = PathBuf::from(&self.config.repository.deploy_path);

        // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è XML (remote, —Ç–æ–ª—å–∫–æ –¥–ª—è ssh —Ñ–∏—á–∏)
        #[cfg(feature = "ssh")]
        let mut xml_backup_done = false;

        let res: Result<()> = (|| {
            #[cfg(feature = "ssh")]
            {
                let session = self.ssh_connect()?;
                let sftp = session.sftp().context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SFTP —Å–µ—Å—Å–∏—é")?;

                // –ë—ç–∫–∞–ø XML, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if sftp.stat(&xml_remote).is_ok() {
                    let bak_path = PathBuf::from(format!("{}.bak", xml_remote.display()));
                    sftp.rename(&xml_remote, &bak_path, None)
                        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø XML {}", xml_remote.display()))?;
                    xml_backup_done = true;
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                for art in &artifacts {
                    let file_name = art.file_name().unwrap().to_string_lossy().to_string();
                    let remote_path = deploy_dir.join(&file_name);
                    self.scp_upload(&session, art, &remote_path)?;
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                    let local_size = fs::metadata(art)?.len();
                    let remote_md = sftp.stat(&remote_path)
                        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å stat —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {}", remote_path.display()))?;
                    if remote_md.size.unwrap_or(0) != local_size {
                        anyhow::bail!("–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è {}", file_name);
                    }
                    uploaded.push(remote_path.display().to_string());
                }

                // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ rename
                self.remote_atomic_update_xml(&sftp, &xml_remote, &xml_content)?;
            }
            #[cfg(not(feature = "ssh"))]
            {
                warn!("SSH –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç–µ feature 'ssh' –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è.");
                // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–∑–¥–∞–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π XML —Ä—è–¥–æ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç–µ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                let local_xml = Path::new("./target/mock").join(xml_remote.file_name().unwrap_or_default());
                std::fs::create_dir_all(local_xml.parent().unwrap()).ok();
                self.atomic_update_xml(&local_xml, &xml_content)?;
            }
            Ok(())
        })();

        if let Err(e) = res {
            warn!("–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {}", e);
            if rollback_on_failure {
                let _ = self.rollback_uploaded(uploaded);
                #[cfg(feature = "ssh")]
                {
                    // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å xml –∏–∑ .bak
                    if let Ok(session) = self.ssh_connect() {
                        if let Ok(sftp) = session.sftp() {
                            let bak_path = PathBuf::from(format!("{}.bak", xml_remote.display()));
                            let _ = sftp.rename(&bak_path, &xml_remote, None);
                        }
                    }
                }
            }
            return Err(e);
        }

        info!("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω");
        Ok(())
    }

    /// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pub async fn rollback(&self) -> Result<()> {
        warn!("‚è™ –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (–∑–∞–≥–ª—É—à–∫–∞)");
        Ok(())
    }

    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn ssh_connect(&self) -> Result<ssh2::Session> {
        use std::net::TcpStream;
        use anyhow::bail;

        let host = &self.config.repository.ssh_host;
        let user = &self.config.repository.ssh_user;

        let stream = TcpStream::connect(format!("{}:22", host))
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {}:22", host))?;

        let mut session = ssh2::Session::new().context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Å–µ—Å—Å–∏—é")?;
        session.set_tcp_stream(stream);
        session.handshake().context("–û—à–∏–±–∫–∞ SSH —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è")?;

        if let Some(key_path) = &self.config.repository.ssh_private_key_path {
            session.userauth_pubkey_file(user, None, Path::new(key_path), None)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–ª—é—á–æ–º: {}", key_path))?;
        } else {
            bail!("ssh_private_key_path –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        }

        if !session.authenticated() {
            bail!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ");
        }

        Ok(session)
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ SCP (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn scp_upload(&self, session: &ssh2::Session, local: &Path, remote: &Path) -> Result<()> {
        use std::io::Read;
        let mut file = std::fs::File::open(local)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {}", local.display()))?;
        let metadata = file.metadata().context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞")?;

        let mut channel = session.scp_send(remote, 0o644, metadata.len(), None)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SCP –¥–ª—è {}", remote.display()))?;

        std::io::copy(&mut file, &mut channel)
            .with_context(|| format!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {}", local.display()))?;
        channel.send_eof().ok();
        channel.wait_eof().ok();
        channel.wait_close().ok();
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (feature "ssh"), –±–µ–∑–æ–ø–∞—Å–Ω—ã–π no-op –±–µ–∑ —Ñ–∏—á–∏
    pub fn upload_artifact<P: AsRef<Path>>(&self, local: P, remote: P) -> Result<()> {
        #[cfg(feature = "ssh")]
        {
            let session = self.ssh_connect()?;
            self.scp_upload(&session, local.as_ref(), remote.as_ref())
        }
        #[cfg(not(feature = "ssh"))]
        {
            // –ë–µ–∑ —Ñ–∏—á–∏ ssh –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∞
            tracing::info!("SSH –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ —Ñ–∏—á—É 'ssh' –≤ Cargo)");
            Ok(())
        }
    }

    /// –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SFTP (feature "ssh")
    #[cfg(feature = "ssh")]
    fn remote_atomic_update_xml(&self, sftp: &ssh2::Sftp, xml_remote: &Path, content: &str) -> Result<()> {
        use std::io::Write;
        // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        let dir = xml_remote.parent().unwrap_or_else(|| Path::new("."));
        let tmp_remote = dir.join(format!("{}.tmp", xml_remote.file_name().and_then(|n| n.to_str()).unwrap_or("updatePlugins.xml")));
        // –∑–∞–ø–∏—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        {
            let mut file = sftp.create(&tmp_remote)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {}", tmp_remote.display()))?;
            file.write_all(content.as_bytes())
                .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ")?;
            file.flush().ok();
        }
        // rename –ø–æ–≤–µ—Ä—Ö —Ü–µ–ª–µ–≤–æ–≥–æ
        sftp.rename(&tmp_remote, xml_remote, None)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π XML {}", xml_remote.display()))?;
        Ok(())
    }

    /// –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–º–µ–Ω–∞
    pub fn atomic_update_xml<P: AsRef<Path>>(&self, xml_path: P, content: &str) -> Result<()> {
        let xml_path = xml_path.as_ref();
        let dir = xml_path.parent().unwrap_or_else(|| Path::new("."));

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã rename –±—ã–ª –∞—Ç–æ–º–∞—Ä–Ω—ã–º –Ω–∞ –æ–¥–Ω–æ–º FS
        let mut tmp_path = PathBuf::from(dir);
        let file_name = xml_path
            .file_name()
            .and_then(|n| n.to_str())
            .unwrap_or("updatePlugins.xml");
        tmp_path.push(format!("{}.tmp", file_name));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ –¥–∏—Å–∫
        fs::write(&tmp_path, content)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML: {}", tmp_path.display()))?;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤–µ—Ä—Ö —Ü–µ–ª–µ–≤–æ–≥–æ (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–∞ –æ–¥–Ω–æ–º FS)
        fs::rename(&tmp_path, xml_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å XML {}", xml_path.display()))?;

        Ok(())
    }

    /// –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è (zip) –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å–±–æ—Ä–∫–∏
    fn find_artifacts(&self) -> Result<Vec<PathBuf>> {
        let out_dir = PathBuf::from(&self.config.build.output_dir);
        let mut files = Vec::new();
        for entry in WalkDir::new(&out_dir).into_iter().filter_map(|e| e.ok()) {
            if entry.metadata().map(|m| m.is_file()).unwrap_or(false) {
                let p = entry.path();
                if p.extension().and_then(|e| e.to_str()) == Some("zip") {
                    files.push(p.to_path_buf());
                }
            }
        }
        Ok(files)
    }

    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ XML –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    fn build_repository_xml(&self, artifacts: &[PathBuf]) -> Result<String> {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö sha256
        let mut items = String::new();
        for p in artifacts {
            let name = p.file_name().unwrap().to_string_lossy();
            let sha = self.sha256_file(p)?;
            items.push_str(&format!("    <plugin file=\"{}\" sha256=\"{}\"/>\n", name, sha));
        }
        let xml = format!(
            "<plugins>\n{}\n</plugins>",
            items
        );
        Ok(xml)
    }

    fn sha256_file(&self, path: &Path) -> Result<String> {
        let mut file = std::fs::File::open(path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ö–µ—à–∞: {}", path.display()))?;
        let mut hasher = Sha256::new();
        std::io::copy(&mut file, &mut hasher).context("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö–µ—à–∞")?;
        let digest = hasher.finalize();
        Ok(format!("{:x}", digest))
    }

    /// –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏ ssh ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    fn rollback_uploaded(&self, remote_paths: Vec<String>) {
        #[cfg(feature = "ssh")]
        {
            if let Ok(session) = self.ssh_connect() {
                if let Ok(sftp) = session.sftp() {
                    for p in remote_paths {
                        let _ = sftp.unlink(Path::new(&p));
                    }
                }
            }
        }
        #[cfg(not(feature = "ssh"))]
        {
            let _ = remote_paths; // no-op
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_deployer_validate() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.validate().await; // –¥–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        }
    }

    #[tokio::test]
    async fn test_deployer_deploy_and_rollback() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.deploy(false, true).await;
            let _ = d.rollback().await;
        }
    }

    #[test]
    fn test_atomic_update_xml() {
        let tmpdir = tempfile::tempdir().expect("tempdir");
        let xml_path = tmpdir.path().join("updatePlugins.xml");
        // –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        fs::write(&xml_path, "<plugins></plugins>").expect("write initial");

        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            d.atomic_update_xml(&xml_path, "<plugins><plugin id=\"x\"/></plugins>")
                .expect("atomic update");
            let updated = fs::read_to_string(&xml_path).expect("read updated");
            assert!(updated.contains("plugin id=\"x\""));
        }
    }
}