use anyhow::{Result, Context};
use tracing::{info, warn};

use crate::config::parser::Config;

/// –î–≤–∏–∂–æ–∫ –¥–µ–ø–ª–æ—è
#[derive(Debug, Clone)]
pub struct Deployer {
    config: Config,
}

impl Deployer {
    pub fn new(config: Config) -> Self {
        Self { config }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    pub async fn validate(&self) -> Result<()> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º");
        self.config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    pub async fn deploy(&self, force: bool, rollback_on_failure: bool) -> Result<()> {
        info!("üì¶ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è (force={}, rollback_on_failure={})", force, rollback_on_failure);
        // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è SSH/SCP –¥–µ–ø–ª–æ—è –∏ atomic –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è XML
        // –°–µ–π—á–∞—Å: –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        Ok(())
    }

    /// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pub async fn rollback(&self) -> Result<()> {
        warn!("‚è™ –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (–∑–∞–≥–ª—É—à–∫–∞)");
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_deployer_validate() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.validate().await; // –¥–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        }
    }

    #[tokio::test]
    async fn test_deployer_deploy_and_rollback() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.deploy(false, true).await;
            let _ = d.rollback().await;
        }
    }
}