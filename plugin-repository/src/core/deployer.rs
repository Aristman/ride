use anyhow::{Result, Context};
use tracing::{info, warn};
use std::fs;
use std::path::{Path, PathBuf};

use crate::config::parser::Config;

/// –î–≤–∏–∂–æ–∫ –¥–µ–ø–ª–æ—è
#[derive(Debug, Clone)]
pub struct Deployer {
    config: Config,
}

impl Deployer {
    pub fn new(config: Config) -> Self {
        Self { config }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    pub async fn validate(&self) -> Result<()> {
        info!("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º");
        self.config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    pub async fn deploy(&self, force: bool, rollback_on_failure: bool) -> Result<()> {
        info!("üì¶ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è (force={}, rollback_on_failure={})", force, rollback_on_failure);
        // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è SSH/SCP –¥–µ–ø–ª–æ—è –∏ atomic –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è XML
        // –°–µ–π—á–∞—Å: –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        Ok(())
    }

    /// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pub async fn rollback(&self) -> Result<()> {
        warn!("‚è™ –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (–∑–∞–≥–ª—É—à–∫–∞)");
        Ok(())
    }

    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn ssh_connect(&self) -> Result<ssh2::Session> {
        use std::net::TcpStream;
        use anyhow::bail;

        let host = &self.config.repository.ssh_host;
        let user = &self.config.repository.ssh_user;

        let stream = TcpStream::connect(format!("{}:22", host))
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {}:22", host))?;

        let mut session = ssh2::Session::new().context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Å–µ—Å—Å–∏—é")?;
        session.set_tcp_stream(stream);
        session.handshake().context("–û—à–∏–±–∫–∞ SSH —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è")?;

        if let Some(key_path) = &self.config.repository.ssh_private_key_path {
            session.userauth_pubkey_file(user, None, Path::new(key_path), None)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–ª—é—á–æ–º: {}", key_path))?;
        } else {
            bail!("ssh_private_key_path –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        }

        if !session.authenticated() {
            bail!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ SSH —Å–µ—Ä–≤–µ—Ä–µ");
        }

        Ok(session)
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ SCP (—Ç—Ä–µ–±—É–µ—Ç feature "ssh")
    #[cfg(feature = "ssh")]
    fn scp_upload(&self, session: &ssh2::Session, local: &Path, remote: &Path) -> Result<()> {
        use std::io::Read;
        let mut file = std::fs::File::open(local)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {}", local.display()))?;
        let metadata = file.metadata().context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞")?;

        let mut channel = session.scp_send(remote, 0o644, metadata.len(), None)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SCP –¥–ª—è {}", remote.display()))?;

        std::io::copy(&mut file, &mut channel)
            .with_context(|| format!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {}", local.display()))?;
        channel.send_eof().ok();
        channel.wait_eof().ok();
        channel.wait_close().ok();
        Ok(())
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (feature "ssh"), –±–µ–∑–æ–ø–∞—Å–Ω—ã–π no-op –±–µ–∑ —Ñ–∏—á–∏
    pub fn upload_artifact<P: AsRef<Path>>(&self, local: P, remote: P) -> Result<()> {
        #[cfg(feature = "ssh")]
        {
            let session = self.ssh_connect()?;
            self.scp_upload(&session, local.as_ref(), remote.as_ref())
        }
        #[cfg(not(feature = "ssh"))]
        {
            // –ë–µ–∑ —Ñ–∏—á–∏ ssh –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∞
            tracing::info!("SSH –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ —Ñ–∏—á—É 'ssh' –≤ Cargo)");
            Ok(())
        }
    }

    /// –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–º–µ–Ω–∞
    pub fn atomic_update_xml<P: AsRef<Path>>(&self, xml_path: P, content: &str) -> Result<()> {
        let xml_path = xml_path.as_ref();
        let dir = xml_path.parent().unwrap_or_else(|| Path::new("."));

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã rename –±—ã–ª –∞—Ç–æ–º–∞—Ä–Ω—ã–º –Ω–∞ –æ–¥–Ω–æ–º FS
        let mut tmp_path = PathBuf::from(dir);
        let file_name = xml_path
            .file_name()
            .and_then(|n| n.to_str())
            .unwrap_or("updatePlugins.xml");
        tmp_path.push(format!("{}.tmp", file_name));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ –¥–∏—Å–∫
        fs::write(&tmp_path, content)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML: {}", tmp_path.display()))?;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤–µ—Ä—Ö —Ü–µ–ª–µ–≤–æ–≥–æ (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–∞ –æ–¥–Ω–æ–º FS)
        fs::rename(&tmp_path, xml_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å XML {}", xml_path.display()))?;

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_deployer_validate() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.validate().await; // –¥–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        }
    }

    #[tokio::test]
    async fn test_deployer_deploy_and_rollback() {
        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            let _ = d.deploy(false, true).await;
            let _ = d.rollback().await;
        }
    }

    #[test]
    fn test_atomic_update_xml() {
        let tmpdir = tempfile::tempdir().expect("tempdir");
        let xml_path = tmpdir.path().join("updatePlugins.xml");
        // –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        fs::write(&xml_path, "<plugins></plugins>").expect("write initial");

        if let Ok(cfg) = Config::load_from_file("plugin-repository/config.toml") {
            let d = Deployer::new(cfg);
            d.atomic_update_xml(&xml_path, "<plugins><plugin id=\"x\"/></plugins>")
                .expect("atomic update");
            let updated = fs::read_to_string(&xml_path).expect("read updated");
            assert!(updated.contains("plugin id=\"x\""));
        }
    }
}