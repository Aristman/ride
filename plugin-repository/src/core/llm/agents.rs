use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use tracing::{info, debug, error, warn};
use super::yandexgpt::{YandexGPTClient, YandexGPTConfig, YandexGPTClientFactory};
use super::prompts::*;
use crate::git::{GitRepository, GitCommit, ReleaseAnalysis, ChangeType};

#[inline]
fn preview(s: &str, n: usize) -> String {
    s.chars().take(n).collect::<String>()
}

/// –ë–∞–∑–æ–≤—ã–π —Ç—Ä–µ–π—Ç –¥–ª—è LLM –∞–≥–µ–Ω—Ç–æ–≤
pub trait LLMAgent {
    async fn generate_response(&self, input: &str) -> Result<String>;
    fn get_agent_name(&self) -> &'static str;
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VersionInfo {
    pub current_version: String,
    pub new_version: Option<String>,
    pub branch: String,
    pub git_log: Option<String>,
    pub changes_count: usize,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VersionAnalysis {
    pub suggested_version: String,
    pub reasoning: String,
    pub confidence: f32,
    pub change_types: Vec<String>,
}

/// Changelog —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeneratedChangelog {
    pub version: String,
    pub changelog: String,
    pub sections: Vec<ChangelogSection>,
    pub total_changes: usize,
}

/// –°–µ–∫—Ü–∏—è changelog
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChangelogSection {
    pub title: String,
    pub changes: Vec<String>,
    pub emoji: String,
}

/// Release notes —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeneratedReleaseNotes {
    pub title: String,
    pub subtitle: String,
    pub highlights: Vec<String>,
    pub body: String,
    pub version: String,
}

/// –ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
pub struct ChangelogAgent {
    client: YandexGPTClient,
    cache: HashMap<String, String>,
}

impl ChangelogAgent {
    pub fn new(client: YandexGPTClient) -> Self {
        Self {
            client,
            cache: HashMap::new(),
        }
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ git –∏—Å—Ç–æ—Ä–∏–∏
    pub async fn generate_changelog(&self, version_info: &VersionInfo) -> Result<GeneratedChangelog> {
        info!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –¥–ª—è –≤–µ—Ä—Å–∏–∏ {:?}", version_info.new_version);

        let git_log = version_info.git_log.as_deref().unwrap_or("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π");

        let prompt = CHANGELOG_PROMPT
            .replace("{new_version}", &version_info.new_version.as_deref().unwrap_or("unknown"))
            .replace("{old_version}", &version_info.current_version)
            .replace("{branch}", &version_info.branch)
            .replace("{git_log}", git_log);

        debug!("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ YandexGPT: {}", preview(&prompt, 200));

        let response = self.client.chat_completion_with_retry(&prompt, 3).await
            .context("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog")?;

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
        let sections = self.parse_changelog_sections(&response);
        let total_changes = sections.iter().map(|s| s.changes.len()).sum();

        Ok(GeneratedChangelog {
            version: version_info.new_version.clone().unwrap_or_else(|| "unknown".to_string()),
            changelog: response.clone(),
            sections,
            total_changes,
        })
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ GitRepository –∞–Ω–∞–ª–∏–∑–∞
    pub async fn generate_changelog_from_repo(&self, repo: &GitRepository, from_tag: Option<&str>, to_tag: Option<&str>) -> Result<GeneratedChangelog> {
        info!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");

        let (_, commits) = repo.get_full_analysis(from_tag, to_tag).await?;
        let version = to_tag.unwrap_or("HEAD").to_string();

        // –§–æ—Ä–º–∏—Ä—É–µ–º git –ª–æ–≥ –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
        let git_log = commits.iter()
            .map(|commit| format!("{}: {}", commit.short_hash, commit.message))
            .collect::<Vec<_>>()
            .join("\n");

        let old_version = from_tag.unwrap_or("previous").to_string();
        let branch = if repo.history.is_git_repository() {
            repo.history.get_current_branch().await.unwrap_or_else(|_| "main".to_string())
        } else {
            "main".to_string()
        };

        let version_info = VersionInfo {
            current_version: old_version,
            new_version: Some(version),
            branch,
            git_log: Some(git_log),
            changes_count: commits.len(),
        };

        self.generate_changelog(&version_info).await
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π changelog —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pub async fn generate_enhanced_changelog(&self, repo: &GitRepository, analysis: &ReleaseAnalysis) -> Result<GeneratedChangelog> {
        info!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ changelog —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞");

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö
        let commits = repo.history.get_recent_commits(50).await?;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let mut grouped_commits: HashMap<ChangeType, Vec<&GitCommit>> = HashMap::new();
        for commit in &commits {
            let change_type = ChangeType::from_message(&commit.message);
            grouped_commits.entry(change_type).or_insert_with(Vec::new).push(commit);
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π changelog
        let mut changelog_content = String::new();
        let mut sections = Vec::new();
        let mut total_changes = 0;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let version = &analysis.version_to.as_deref().unwrap_or("latest");
        changelog_content.push_str(&format!("## –ò–∑–º–µ–Ω–µ–Ω–∏—è {}\n\n", version));

        // –°–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        let section_order = [
            (ChangeType::Breaking, "üí•", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
            (ChangeType::Feature, "üöÄ", "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"),
            (ChangeType::Fix, "üêõ", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
            (ChangeType::Improvement, "üîß", "–£–ª—É—á—à–µ–Ω–∏—è"),
            (ChangeType::Refactoring, "‚ôªÔ∏è", "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥"),
            (ChangeType::Documentation, "üìù", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
            (ChangeType::Testing, "üß™", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            (ChangeType::Chore, "üßπ", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"),
            (ChangeType::Other, "üìã", "–î—Ä—É–≥–æ–µ"),
        ];

        for (change_type, emoji, title) in &section_order {
            if let Some(commits_of_type) = grouped_commits.get(change_type) {
                if !commits_of_type.is_empty() {
                    let section_title = format!("{} {}", emoji, title);
                    changelog_content.push_str(&format!("### {}\n\n", section_title));

                    let mut changes = Vec::new();
                    for commit in commits_of_type {
                        let change_desc = format!("- {} ({}): {}",
                            commit.short_hash,
                            commit.date.format("%Y-%m-%d"),
                            commit.message);
                        changelog_content.push_str(&change_desc);
                        changelog_content.push('\n');

                        changes.push(commit.message.clone());
                    }
                    changelog_content.push('\n');

                    sections.push(ChangelogSection {
                        title: section_title,
                        changes,
                        emoji: emoji.to_string(),
                    });

                    total_changes += commits_of_type.len();
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        changelog_content.push_str("---\n");
        changelog_content.push_str(&format!("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {} –∫–æ–º–º–∏—Ç–æ–≤\n", analysis.total_commits));

        for (change_type, count) in &analysis.change_summary {
            changelog_content.push_str(&format!("- {}: {}\n", change_type.name(), count));
        }

        if !analysis.breaking_changes.is_empty() {
            changelog_content.push_str(&format!("\n**‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:** {}\n", analysis.breaking_changes.len()));
        }

        Ok(GeneratedChangelog {
            version: analysis.version_to.as_deref().unwrap_or("latest").to_string(),
            changelog: changelog_content,
            sections,
            total_changes,
        })
    }

    /// –ü–∞—Ä—Å–∏—Ç changelog –Ω–∞ —Å–µ–∫—Ü–∏–∏
    fn parse_changelog_sections(&self, changelog: &str) -> Vec<ChangelogSection> {
        let mut sections = Vec::new();
        let mut current_section = None;
        let mut current_changes: Vec<String> = Vec::new();

        for line in changelog.lines() {
            let line = line.trim();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ —ç–º–æ–¥–∑–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            if line.starts_with("üöÄ") || line.contains("–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏") || line.contains("–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏") {
                if let Some(section) = current_section.take() {
                    sections.push(section);
                }
                current_changes.clear();
                current_section = Some(ChangelogSection {
                    title: "üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏".to_string(),
                    changes: Vec::new(),
                    emoji: "üöÄ".to_string(),
                });
            } else if line.starts_with("üêõ") || line.contains("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è") {
                if let Some(section) = current_section.take() {
                    sections.push(section);
                }
                current_changes.clear();
                current_section = Some(ChangelogSection {
                    title: "üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è".to_string(),
                    changes: Vec::new(),
                    emoji: "üêõ".to_string(),
                });
            } else if line.starts_with("üîß") || line.contains("–£–ª—É—á—à–µ–Ω–∏—è") {
                if let Some(section) = current_section.take() {
                    sections.push(section);
                }
                current_changes.clear();
                current_section = Some(ChangelogSection {
                    title: "üîß –£–ª—É—á—à–µ–Ω–∏—è".to_string(),
                    changes: Vec::new(),
                    emoji: "üîß".to_string(),
                });
            } else if line.starts_with("üí•") || line.contains("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è") {
                if let Some(section) = current_section.take() {
                    sections.push(section);
                }
                current_changes.clear();
                current_section = Some(ChangelogSection {
                    title: "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è".to_string(),
                    changes: Vec::new(),
                    emoji: "üí•".to_string(),
                });
            } else if line.starts_with("- ") || line.starts_with("* ") {
                let change = line.strip_prefix("- ").unwrap_or(line.strip_prefix("* ").unwrap_or(line)).to_string();
                if let Some(ref mut section) = current_section {
                    section.changes.push(change);
                }
            }
        }

        if let Some(section) = current_section {
            sections.push(section);
        }

        // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–µ–∫—Ü–∏—é
        if sections.is_empty() {
            sections.push(ChangelogSection {
                title: "üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è".to_string(),
                changes: changelog.lines()
                    .filter(|line| line.trim().starts_with("- ") || line.trim().starts_with("* "))
                    .map(|line| line.trim().strip_prefix("- ").unwrap_or(line.strip_prefix("* ").unwrap_or(line)).to_string())
                    .collect(),
                emoji: "üìã".to_string(),
            });
        }

        sections
    }
}

impl LLMAgent for ChangelogAgent {
    async fn generate_response(&self, input: &str) -> Result<String> {
        self.client.chat_completion_with_retry(input, 3).await
    }

    fn get_agent_name(&self) -> &'static str {
        "ChangelogAgent"
    }
}

/// –ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π
pub struct VersionAgent {
    client: YandexGPTClient,
    cache: HashMap<String, String>,
}

impl VersionAgent {
    pub fn new(client: YandexGPTClient) -> Self {
        Self {
            client,
            cache: HashMap::new(),
        }
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä—Å–∏—é
    pub async fn suggest_version(&self, version_info: &VersionInfo) -> Result<VersionAnalysis> {
        info!("ü§ñ –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏");

        let git_log = version_info.git_log.as_deref().unwrap_or("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π");

        let prompt = VERSION_PROMPT
            .replace("{current_version}", &version_info.current_version)
            .replace("{change_types}", &self.analyze_change_types(git_log))
            .replace("{breaking_changes}", &self.count_breaking_changes(git_log).to_string());

        debug!("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ YandexGPT: {}", preview(&prompt, 200));

        let response = self.client.chat_completion_with_retry(&prompt, 3).await
            .context("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π")?;

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç: "1.2.3: –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
        if let Some(colon_pos) = response.find(':') {
            let version = response[..colon_pos].trim().to_string();
            let reasoning = response[colon_pos + 1..].trim().to_string();

            Ok(VersionAnalysis {
                suggested_version: version,
                reasoning,
                confidence: 0.8, // TODO: –£–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                change_types: self.extract_change_types(git_log),
            })
        } else {
            Ok(VersionAnalysis {
                suggested_version: "1.0.0".to_string(),
                reasoning: response,
                confidence: 0.5,
                change_types: vec!["other".to_string()],
            })
        }
    }

    /// –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    pub async fn suggest_version_from_repo(&self, repo: &GitRepository, current_version: &str) -> Result<VersionAnalysis> {
        info!("ü§ñ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");

        let (analysis, commits, latest_tag) = repo.get_changes_since_last_release().await?;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        let suggested_version = repo.suggest_next_version(current_version).await?;

        // –ü–æ–ª—É—á–∞–µ–º git –ª–æ–≥ –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞
        let git_log = commits.iter()
            .map(|commit| format!("{}: {}", commit.short_hash, commit.message))
            .collect::<Vec<_>>()
            .join("\n");

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        let change_types = analysis.change_summary.keys()
            .map(|ct| format!("{:?}", ct))
            .collect::<Vec<_>>()
            .join(", ");

        let prompt = VERSION_PROMPT
            .replace("{current_version}", current_version)
            .replace("{change_types}", &change_types)
            .replace("{breaking_changes}", &analysis.breaking_changes.len().to_string());

        debug!("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ YandexGPT –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");

        let response = self.client.chat_completion_with_retry(&prompt, 2).await
            .context("–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π")?;

        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        let reasoning = format!("–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ {} –∫–æ–º–º–∏—Ç–æ–≤. {}",
            analysis.total_commits,
            response.trim());

        Ok(VersionAnalysis {
            suggested_version,
            reasoning,
            confidence: analysis.confidence,
            change_types: analysis.change_summary.keys()
                .map(|ct| format!("{:?}", ct))
                .collect(),
        })
    }

    /// –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Å —É—á–µ—Ç–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    pub async fn suggest_semantic_version(&self, repo: &GitRepository, current_version: &str) -> Result<VersionAnalysis> {
        info!("ü§ñ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π");

        let (analysis, _, _) = repo.get_changes_since_last_release().await?;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        let recommended_bump = &analysis.recommended_version_bump;

        let (suggested_version, reasoning) = match recommended_bump {
            crate::git::VersionBump::Major => {
                let version = self.increment_major(current_version);
                let reason = format!("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã {} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MAJOR –≤–µ—Ä—Å–∏–∏.",
                    analysis.breaking_changes.len());
                (version, reason)
            }
            crate::git::VersionBump::Minor => {
                let version = self.increment_minor(current_version);
                let features_count = analysis.change_summary.get(&ChangeType::Feature).unwrap_or(&0);
                let reason = format!("–î–æ–±–∞–≤–ª–µ–Ω–æ {} –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MINOR –≤–µ—Ä—Å–∏–∏.",
                    features_count);
                (version, reason)
            }
            crate::git::VersionBump::Patch => {
                let version = self.increment_patch(current_version);
                let fixes_count = analysis.change_summary.get(&ChangeType::Fix).unwrap_or(&0);
                let reason = format!("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {} –æ—à–∏–±–æ–∫. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PATCH –≤–µ—Ä—Å–∏–∏.",
                    fixes_count);
                (version, reason)
            }
            crate::git::VersionBump::Custom(ref version) => {
                (version.clone(), "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è".to_string())
            }
        };

        Ok(VersionAnalysis {
            suggested_version,
            reasoning,
            confidence: analysis.confidence,
            change_types: analysis.change_summary.keys()
                .map(|ct| format!("{:?}", ct))
                .collect(),
        })
    }

    /// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç MAJOR –≤–µ—Ä—Å–∏—é
    fn increment_major(&self, version: &str) -> String {
        if let Ok(mut semver) = semver::Version::parse(version) {
            semver.major += 1;
            semver.minor = 0;
            semver.patch = 0;
            semver.to_string()
        } else {
            format!("{}.0.0", version.split('.').next().unwrap_or("1").parse::<u32>().unwrap_or(1) + 1)
        }
    }

    /// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç MINOR –≤–µ—Ä—Å–∏—é
    fn increment_minor(&self, version: &str) -> String {
        if let Ok(mut semver) = semver::Version::parse(version) {
            semver.minor += 1;
            semver.patch = 0;
            semver.to_string()
        } else {
            let parts: Vec<&str> = version.split('.').collect();
            if parts.len() >= 2 {
                let major = parts[0].parse::<u32>().unwrap_or(1);
                let minor = parts[1].parse::<u32>().unwrap_or(0) + 1;
                format!("{}.{}.0", major, minor)
            } else {
                format!("{}.1.0", parts[0].parse::<u32>().unwrap_or(1))
            }
        }
    }

    /// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç PATCH –≤–µ—Ä—Å–∏—é
    fn increment_patch(&self, version: &str) -> String {
        if let Ok(mut semver) = semver::Version::parse(version) {
            semver.patch += 1;
            semver.to_string()
        } else {
            let parts: Vec<&str> = version.split('.').collect();
            if parts.len() >= 3 {
                let major = parts[0].parse::<u32>().unwrap_or(1);
                let minor = parts[1].parse::<u32>().unwrap_or(0);
                let patch = parts[2].parse::<u32>().unwrap_or(0) + 1;
                format!("{}.{}.{}", major, minor, patch)
            } else {
                format!("{}.0.1", parts[0].parse::<u32>().unwrap_or(1))
            }
        }
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git –ª–æ–≥–µ
    fn analyze_change_types(&self, git_log: &str) -> String {
        let mut types = Vec::new();

        if git_log.to_lowercase().contains("feat") || git_log.to_lowercase().contains("–¥–æ–±–∞–≤–ª–µ–Ω") {
            types.push("features");
        }
        if git_log.to_lowercase().contains("fix") || git_log.to_lowercase().contains("–∏—Å–ø—Ä–∞–≤–ª–µ–Ω") {
            types.push("fixes");
        }
        if git_log.to_lowercase().contains("break") || git_log.to_lowercase().contains("breaking") {
            types.push("breaking_changes");
        }

        types.join(", ")
    }

    /// –°—á–∏—Ç–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    fn count_breaking_changes(&self, git_log: &str) -> usize {
        git_log.to_lowercase().matches("break").count() +
        git_log.to_lowercase().matches("breaking").count()
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
    fn extract_change_types(&self, git_log: &str) -> Vec<String> {
        let mut types = Vec::new();

        if git_log.to_lowercase().contains("feat") {
            types.push("feature".to_string());
        }
        if git_log.to_lowercase().contains("fix") {
            types.push("fix".to_string());
        }
        if git_log.to_lowercase().contains("break") || git_log.to_lowercase().contains("breaking") {
            types.push("breaking".to_string());
        }
        if types.is_empty() {
            types.push("other".to_string());
        }

        types
    }
}

impl LLMAgent for VersionAgent {
    async fn generate_response(&self, input: &str) -> Result<String> {
        self.client.chat_completion_with_retry(input, 3).await
    }

    fn get_agent_name(&self) -> &'static str {
        "VersionAgent"
    }
}

/// –ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes
pub struct ReleaseAgent {
    client: YandexGPTClient,
    cache: HashMap<String, String>,
}

impl ReleaseAgent {
    pub fn new(client: YandexGPTClient) -> Self {
        Self {
            client,
            cache: HashMap::new(),
        }
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç release notes
    pub async fn generate_release_notes(&self, version: &str, changelog: &str, plugin_info: &PluginInfo) -> Result<GeneratedReleaseNotes> {
        info!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è release notes –¥–ª—è –≤–µ—Ä—Å–∏–∏ {}", version);

        let prompt = RELEASE_NOTES_PROMPT
            .replace("{plugin_name}", &plugin_info.name)
            .replace("{plugin_id}", &plugin_info.id)
            .replace("{version}", version)
            .replace("{changelog}", changelog);

        debug!("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ YandexGPT: {}", preview(&prompt, 200));

        let response = self.client.chat_completion_with_retry(&prompt, 3).await
            .context("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes")?;

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        let (title, highlights, body) = self.parse_release_notes(&response);

        Ok(GeneratedReleaseNotes {
            title,
            subtitle: format!("–í–µ—Ä—Å–∏—è {} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞!", version),
            highlights,
            body,
            version: version.to_string(),
        })
    }

    /// –ü–∞—Ä—Å–∏—Ç release notes –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    fn parse_release_notes(&self, notes: &str) -> (String, Vec<String>, String) {
        let mut title = format!("–í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞");
        let mut highlights = Vec::new();
        let mut body_lines = Vec::new();
        let mut _in_highlights = false;

        for line in notes.lines() {
            let line = line.trim();

            if line.starts_with("#") || line.contains("üéâ") || line.contains("üöÄ") {
                title = line.replace("#", "").replace("üéâ", "").replace("üöÄ", "").trim().to_string();
            } else if line.starts_with("‚Ä¢") || line.starts_with("-") || line.starts_with("*") {
                highlights.push(line.trim_start_matches(&['‚Ä¢', '-', '*'][..]).trim().to_string());
                _in_highlights = true;
            } else if line.is_empty() {
                _in_highlights = false;
            } else {
                body_lines.push(line);
            }
        }

        if title.is_empty() {
            title = "üéâ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞".to_string();
        }

        (title, highlights, body_lines.join("\n"))
    }
}

impl LLMAgent for ReleaseAgent {
    async fn generate_response(&self, input: &str) -> Result<String> {
        self.client.chat_completion_with_retry(input, 3).await
    }

    fn get_agent_name(&self) -> &'static str {
        "ReleaseAgent"
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PluginInfo {
    pub name: String,
    pub id: String,
    pub version: String,
    pub description: Option<String>,
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤
pub struct LLMAgentManager {
    pub(crate) changelog_agent: ChangelogAgent,
    pub(crate) version_agent: VersionAgent,
    pub(crate) release_agent: ReleaseAgent,
}

impl LLMAgentManager {
    /// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub fn from_config(config: &crate::config::parser::Config) -> Result<Self> {
        let yandex_config = YandexGPTConfig {
            api_key: config.yandexgpt.api_key.clone(),
            folder_id: config.yandexgpt.folder_id.clone(),
            model: config.yandexgpt.model.clone(),
            temperature: 0.3,
            max_tokens: 2000,
            timeout: std::time::Duration::from_secs(30),
        };

        let client = YandexGPTClient::new(yandex_config);

        Ok(Self {
            changelog_agent: ChangelogAgent::new(client.clone()),
            version_agent: VersionAgent::new(client.clone()),
            release_agent: ReleaseAgent::new(client),
        })
    }

    /// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    pub fn from_env() -> Result<Self> {
        let client = YandexGPTClientFactory::from_env()?;

        Ok(Self {
            changelog_agent: ChangelogAgent::new(client.clone()),
            version_agent: VersionAgent::new(client.clone()),
            release_agent: ReleaseAgent::new(client),
        })
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç changelog
    pub async fn generate_changelog(&self, version_info: &VersionInfo) -> Result<GeneratedChangelog> {
        self.changelog_agent.generate_changelog(version_info).await
    }

    /// –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä—Å–∏—é
    pub async fn suggest_version(&self, version_info: &VersionInfo) -> Result<VersionAnalysis> {
        self.version_agent.suggest_version(version_info).await
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç release notes
    pub async fn generate_release_notes(&self, version: &str, changelog: &str, plugin_info: &PluginInfo) -> Result<GeneratedReleaseNotes> {
        self.release_agent.generate_release_notes(version, changelog, plugin_info).await
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    pub async fn health_check(&self) -> Result<bool> {
        match self.changelog_agent.client.health_check().await {
            Ok(true) => {
                info!("‚úÖ –í—Å–µ LLM –∞–≥–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã");
                Ok(true)
            }
            Ok(false) => {
                warn!("‚ö†Ô∏è LLM –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
                Ok(false)
            }
            Err(e) => {
                error!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM –∞–≥–µ–Ω—Ç–æ–≤: {}", e);
                Ok(false)
            }
        }
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    pub async fn generate_release_package(&self, repo: &GitRepository, current_version: &str, plugin_info: &PluginInfo) -> Result<ReleasePackage> {
        info!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞");

        // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        let (analysis, commits, _) = repo.get_changes_since_last_release().await?;

        // 2. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        let version_analysis = self.version_agent.suggest_semantic_version(repo, current_version).await?;
        let new_version = &version_analysis.suggested_version;

        // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog
        let changelog = self.changelog_agent.generate_enhanced_changelog(repo, &analysis).await?;

        // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º release notes
        let release_notes = self.release_agent.generate_release_notes(
            new_version,
            &changelog.changelog,
            plugin_info,
        ).await?;

        // 5. –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        let summary = ReleaseSummary {
            current_version: current_version.to_string(),
            new_version: new_version.clone(),
            total_commits: analysis.total_commits as u32,
            change_summary: analysis.change_summary.clone(),
            breaking_changes_count: analysis.breaking_changes.len(),
            confidence: analysis.confidence,
            readiness_score: self.calculate_readiness_score(&analysis),
        };

        Ok(ReleasePackage {
            version: new_version.clone(),
            changelog,
            release_notes,
            version_analysis,
            release_summary: summary,
            commits_analyzed: commits,
        })
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–ª–∏–∑—É
    pub async fn analyze_release_readiness(&self, repo: &GitRepository, version: &str) -> Result<ReadinessReport> {
        info!("üîç –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É –≤–µ—Ä—Å–∏–∏ {}", version);

        let (analysis, _, _) = repo.get_changes_since_last_release().await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        let has_breaking_changes = !analysis.breaking_changes.is_empty();

        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let complexity_score = self.calculate_complexity_score(&analysis);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
        let has_tests = analysis.change_summary.contains_key(&ChangeType::Testing);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        let has_docs = analysis.change_summary.contains_key(&ChangeType::Documentation);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        let readiness_score = self.calculate_readiness_score(&analysis);

        let readiness_level = match readiness_score {
            score if score >= 0.9 => ReadinessLevel::Ready,
            score if score >= 0.7 => ReadinessLevel::ReadyWithConcerns,
            score if score >= 0.5 => ReadinessLevel::NeedsAttention,
            _ => ReadinessLevel::NotReady,
        };

        let mut recommendations = Vec::new();

        if has_breaking_changes {
            recommendations.push("–û–±–Ω–æ–≤–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è breaking changes".to_string());
        }

        if !has_tests && analysis.total_commits > 5 {
            recommendations.push("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π".to_string());
        }

        if !has_docs && analysis.change_summary.contains_key(&ChangeType::Feature) {
            recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π".to_string());
        }

        if complexity_score > 0.8 {
            recommendations.push("–í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—ç—Ç–∞–ø–Ω—ã–π —Ä–µ–ª–∏–∑".to_string());
        }

        Ok(ReadinessReport {
            version: version.to_string(),
            readiness_level,
            readiness_score,
            has_breaking_changes,
            complexity_score,
            has_tests,
            has_docs,
            recommendations,
            analysis_summary: format!("–ê–Ω–∞–ª–∏–∑ {} –∫–æ–º–º–∏—Ç–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {:.1}%",
                analysis.total_commits, analysis.confidence * 100.0),
        })
    }

    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
    fn calculate_readiness_score(&self, analysis: &ReleaseAnalysis) -> f32 {
        let mut score = 0.5; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

        // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–ª –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if !analysis.breaking_changes.is_empty() {
            score -= 0.3;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
        if analysis.change_summary.contains_key(&ChangeType::Testing) {
            score += 0.2;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if analysis.change_summary.contains_key(&ChangeType::Documentation) {
            score += 0.1;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–ª –∑–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞)
        if analysis.change_summary.contains_key(&ChangeType::Refactoring) {
            score += 0.1;
        }

        // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–ª –∑–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ (—Ä–∏—Å–∫)
        if analysis.total_commits > 20 {
            score -= 0.1;
        }

        // –£—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        score = score * analysis.confidence + (1.0 - analysis.confidence) * 0.3;

        score.min(1.0).max(0.0)
    }

    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    fn calculate_complexity_score(&self, analysis: &ReleaseAnalysis) -> f32 {
        let mut score = 0.0;

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        score += analysis.breaking_changes.len() as f32 * 0.3;

        // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if let Some(features) = analysis.change_summary.get(&ChangeType::Feature) {
            score += *features as f32 * 0.1;
        }

        // –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if analysis.total_commits > 10 {
            score += (analysis.total_commits - 10) as f32 * 0.02;
        }

        // –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if let Some(refactors) = analysis.change_summary.get(&ChangeType::Refactoring) {
            score += *refactors as f32 * 0.05;
        }

        score.min(1.0)
    }
}

/// –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è —Ä–µ–ª–∏–∑–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReleasePackage {
    pub version: String,
    pub changelog: GeneratedChangelog,
    pub release_notes: GeneratedReleaseNotes,
    pub version_analysis: VersionAnalysis,
    pub release_summary: ReleaseSummary,
    pub commits_analyzed: Vec<GitCommit>,
}

/// –°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–ª–∏–∑—É
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReleaseSummary {
    pub current_version: String,
    pub new_version: String,
    pub total_commits: u32,
    pub change_summary: std::collections::HashMap<ChangeType, usize>,
    pub breaking_changes_count: usize,
    pub confidence: f32,
    pub readiness_score: f32,
}

/// –û—Ç—á–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReadinessReport {
    pub version: String,
    pub readiness_level: ReadinessLevel,
    pub readiness_score: f32,
    pub has_breaking_changes: bool,
    pub complexity_score: f32,
    pub has_tests: bool,
    pub has_docs: bool,
    pub recommendations: Vec<String>,
    pub analysis_summary: String,
}

/// –£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ReadinessLevel {
    Ready,                    // –ì–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É
    ReadyWithConcerns,       // –ì–æ—Ç–æ–≤, –Ω–æ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏
    NeedsAttention,          // –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
    NotReady,                // –ù–µ –≥–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É
}

impl ReadinessLevel {
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    pub fn emoji(&self) -> &'static str {
        match self {
            ReadinessLevel::Ready => "‚úÖ",
            ReadinessLevel::ReadyWithConcerns => "‚ö†Ô∏è",
            ReadinessLevel::NeedsAttention => "üî∂",
            ReadinessLevel::NotReady => "üî¥",
        }
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    pub fn name(&self) -> &'static str {
        match self {
            ReadinessLevel::Ready => "–ì–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É",
            ReadinessLevel::ReadyWithConcerns => "–ì–æ—Ç–æ–≤ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏",
            ReadinessLevel::NeedsAttention => "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            ReadinessLevel::NotReady => "–ù–µ –≥–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É",
        }
    }
}