use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::time::Duration;
use tokio::time::timeout;
use tracing::{info, warn, error, debug};
use reqwest::Client;

/// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è YandexGPT API
#[derive(Clone)]
pub struct YandexGPTClient {
    client: Client,
    api_key: String,
    folder_id: String,
    base_url: String,
    model: String,
    temperature: f32,
    max_tokens: u32,
}

/// –ó–∞–ø—Ä–æ—Å –∫ YandexGPT API
#[derive(Debug, Serialize)]
struct YandexGPTRequest {
    model_uri: String,
    completion_options: CompletionOptions,
    messages: Vec<Message>,
}

/// –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
#[derive(Debug, Serialize)]
struct CompletionOptions {
    stream: bool,
    temperature: f32,
    max_tokens: u32,
}

/// –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
#[derive(Debug, Serialize)]
struct Message {
    role: String,
    text: String,
}

/// –û—Ç–≤–µ—Ç –æ—Ç YandexGPT API
#[derive(Debug, Deserialize)]
struct YandexGPTResponse {
    result: CompletionResult,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
#[derive(Debug, Deserialize)]
struct CompletionResult {
    alternatives: Vec<Alternative>,
    usage: Usage,
}

/// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
#[derive(Debug, Deserialize)]
struct Alternative {
    message: ResponseMessage,
    status: String,
}

/// –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#[derive(Debug, Deserialize)]
struct ResponseMessage {
    role: String,
    text: String,
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
#[derive(Debug, Deserialize)]
struct Usage {
    #[serde(rename = "inputTextTokens")]
    input_text_tokens: String,
    #[serde(rename = "completionTokens")]
    completion_tokens: String,
    #[serde(rename = "totalTokens")]
    total_tokens: String,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT
#[derive(Debug, Clone)]
pub struct YandexGPTConfig {
    pub api_key: String,
    pub folder_id: String,
    pub model: String,
    pub temperature: f32,
    pub max_tokens: u32,
    pub timeout: Duration,
}

impl Default for YandexGPTConfig {
    fn default() -> Self {
        Self {
            api_key: std::env::var("DEPLOY_PLUGIN_YANDEX_API_KEY")
                .unwrap_or_else(|_| "default_key".to_string()),
            folder_id: std::env::var("DEPLOY_PLUGIN_YANDEX_FOLDER_ID")
                .unwrap_or_else(|_| "default_folder".to_string()),
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏ —Å –≤–µ—Ä—Å–∏–µ–π
            model: "yandexgpt/latest".to_string(),
            temperature: 0.3,
            max_tokens: 2000,
            timeout: Duration::from_secs(30),
        }
    }
}

impl YandexGPTClient {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    pub fn new(config: YandexGPTConfig) -> Self {
        let client = Client::builder()
            .timeout(config.timeout)
            .build()
            .expect("Failed to create HTTP client");

        Self {
            client,
            api_key: config.api_key,
            folder_id: config.folder_id,
            base_url: "https://llm.api.cloud.yandex.net/foundationModels/v1/completion".to_string(),
            model: config.model,
            temperature: config.temperature,
            max_tokens: config.max_tokens,
        }
    }

    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç model_uri –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    fn build_model_uri(&self) -> String {
        if self.model.starts_with("gpt://") {
            self.model.clone()
        } else {
            format!("gpt://{}/{}", self.folder_id, self.model)
        }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç chat completion –∑–∞–ø—Ä–æ—Å
    pub async fn chat_completion(&self, prompt: &str) -> Result<String> {
        info!("ü§ñ –ó–∞–ø—Ä–æ—Å –∫ YandexGPT API");

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        debug!("YandexGPT raw model from config: {}", self.model);
        debug!("YandexGPT folder_id from config: {}", self.folder_id);
        if self.folder_id.contains("${") {
            warn!("folder_id —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DEPLOY_PLUGIN_YANDEX_FOLDER_ID");
        }
        if !self.model.contains('/') && !self.model.starts_with("gpt://") {
            warn!("model –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/latest'). –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {}", self.model);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π model_uri
        let model_uri = self.build_model_uri();
        info!("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {}", model_uri);

        let request_body = YandexGPTRequest {
            model_uri,
            completion_options: CompletionOptions {
                stream: false,
                temperature: self.temperature,
                max_tokens: self.max_tokens,
            },
            messages: vec![
                Message {
                    role: "system".to_string(),
                    text: "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.".to_string(),
                },
                Message {
                    role: "user".to_string(),
                    text: prompt.to_string(),
                },
            ],
        };

        debug!("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", serde_json::to_string(&request_body)?);

        let response = timeout(
            Duration::from_secs(30),
            self.client
                .post(&self.base_url)
                .header("Authorization", format!("Api-Key {}", self.api_key))
                .header("Content-Type", "application/json")
                .header("x-folder-id", &self.folder_id)
                .json(&request_body)
                .send()
        ).await
        .context("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT API")?
        .context("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT API")?;

        let status = response.status();
        debug!("–û—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç YandexGPT: {}", status);
        let response_text = response.text().await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")?;
        debug!("–°—ã—Ä—ã–π –æ—Ç–≤–µ—Ç YandexGPT (–æ–±—Ä–µ–∑–∞–Ω –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤): {}", &response_text[..response_text.len().min(500)]);

        if !status.is_success() {
            let error_msg = format!("YandexGPT API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {}: {}", status, response_text);
            error!("{}", error_msg);

            // –ê–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫ –Ω–∞ yandexgpt-lite/latest –ø—Ä–∏ invalid model_uri
            if response_text.contains("invalid model_uri") {
                // –°—Ç—Ä–æ–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URI
                let alt_model = if self.model.contains("yandexgpt-lite") { self.model.clone() } else { self.model.replace("yandexgpt", "yandexgpt-lite") };
                let alt_uri = if alt_model.starts_with("gpt://") { alt_model.clone() } else { format!("gpt://{}/{}", self.folder_id, alt_model) };
                warn!("–ü—Ä–æ–±—É–µ–º fallback –º–æ–¥–µ–ª—å: {}", alt_uri);

                let alt_body = YandexGPTRequest {
                    model_uri: alt_uri,
                    completion_options: CompletionOptions { stream: false, temperature: self.temperature, max_tokens: self.max_tokens },
                    messages: vec![
                        Message { role: "system".to_string(), text: "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.".to_string() },
                        Message { role: "user".to_string(), text: prompt.to_string() },
                    ],
                };

                let alt_resp = timeout(
                    Duration::from_secs(30),
                    self.client
                        .post(&self.base_url)
                        .header("Authorization", format!("Api-Key {}", self.api_key))
                        .header("Content-Type", "application/json")
                        .header("x-folder-id", &self.folder_id)
                        .json(&alt_body)
                        .send()
                ).await
                .context("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT API (fallback)")?
                .context("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT API (fallback)")?;

                let alt_status = alt_resp.status();
                debug!("Fallback –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç YandexGPT: {}", alt_status);
                let alt_text = alt_resp.text().await.context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç fallback –æ—Ç YandexGPT")?;
                debug!("Fallback —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç YandexGPT (–æ–±—Ä–µ–∑–∞–Ω –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤): {}", &alt_text[..alt_text.len().min(500)]);

                if !alt_status.is_success() {
                    let fb_err = format!("Fallback YandexGPT –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {}: {}", alt_status, alt_text);
                    error!("{}", fb_err);
                    return Err(anyhow::anyhow!(error_msg));
                }

                let api_response: YandexGPTResponse = serde_json::from_str(&alt_text)
                    .with_context(|| format!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT (fallback). –û—Ç–≤–µ—Ç: {}", alt_text))?;

                if let Some(alternative) = api_response.result.alternatives.first() {
                    if alternative.status == "ALTERNATIVE_STATUS_FINAL" || alternative.status == "ALTERNATIVE_STATUS_SUCCESS" {
                        info!("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT (fallback) ({} —Ç–æ–∫–µ–Ω–æ–≤)", api_response.result.usage.total_tokens);
                        return Ok(alternative.message.text.clone());
                    }
                }

                return Err(anyhow::anyhow!(error_msg));
            }

            return Err(anyhow::anyhow!(error_msg));
        }

        debug!("–û—Ç–≤–µ—Ç –æ—Ç YandexGPT API: {}", response_text);

        let api_response: YandexGPTResponse = serde_json::from_str(&response_text)
            .with_context(|| format!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT. –û—Ç–≤–µ—Ç: {}", response_text))?;

        if let Some(alternative) = api_response.result.alternatives.first() {
            if alternative.status == "ALTERNATIVE_STATUS_FINAL" || alternative.status == "ALTERNATIVE_STATUS_SUCCESS" {
                info!("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT ({} —Ç–æ–∫–µ–Ω–æ–≤)", api_response.result.usage.total_tokens);
                debug!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {:?}", api_response.result.usage);
                Ok(alternative.message.text.clone())
            } else {
                let error_msg = format!("YandexGPT –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {}", alternative.status);
                error!("{}", error_msg);
                Err(anyhow::anyhow!(error_msg))
            }
        } else {
            let error_msg = "YandexGPT –Ω–µ –≤–µ—Ä–Ω—É–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ";
            error!("{}", error_msg);
            Err(anyhow::anyhow!(error_msg))
        }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
    pub async fn chat_completion_with_retry(&self, prompt: &str, max_retries: u32) -> Result<String> {
        let mut last_error = None;

        for attempt in 0..=max_retries {
            match self.chat_completion(prompt).await {
                Ok(response) => return Ok(response),
                Err(e) => {
                    warn!("–ü–æ–ø—ã—Ç–∫–∞ {} –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", attempt + 1, e);
                    last_error = Some(e);

                    if attempt < max_retries {
                        let delay = Duration::from_millis(1000 * (2_u64.pow(attempt)));
                        info!("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {:?}", delay);
                        tokio::time::sleep(delay).await;
                    }
                }
            }
        }

        Err(last_error.unwrap_or_else(|| anyhow::anyhow!("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")))
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    pub async fn health_check(&self) -> Result<bool> {
        info!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YandexGPT API");

        match self.chat_completion("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.").await {
            Ok(_) => {
                info!("‚úÖ YandexGPT API –¥–æ—Å—Ç—É–ø–µ–Ω");
                Ok(true)
            }
            Err(e) => {
                warn!("‚ùå YandexGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e);
                Ok(false)
            }
        }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    pub fn get_model_info(&self) -> &str {
        &self.model
    }
}

/// –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
pub struct YandexGPTClientFactory;

impl YandexGPTClientFactory {
    /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    pub fn from_env() -> Result<YandexGPTClient> {
        let config = YandexGPTConfig::default();

        if config.api_key == "default_key" {
            return Err(anyhow::anyhow!(
                "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DEPLOY_PLUGIN_YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            ));
        }

        if config.folder_id == "default_folder" {
            return Err(anyhow::anyhow!(
                "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DEPLOY_PLUGIN_YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            ));
        }

        Ok(YandexGPTClient::new(config))
    }

    /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn with_config(config: YandexGPTConfig) -> YandexGPTClient {
        YandexGPTClient::new(config)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_yandexgpt_client_creation() {
        let config = YandexGPTConfig {
            api_key: "test_key".to_string(),
            folder_id: "test_folder".to_string(),
            model: "yandexgpt/latest".to_string(),
            temperature: 0.3,
            max_tokens: 1000,
            timeout: Duration::from_secs(10),
        };

        let client = YandexGPTClient::new(config);
        assert_eq!(client.folder_id, "test_folder");
        assert_eq!(client.get_model_info(), "yandexgpt/latest");
    }

    #[tokio::test]
    async fn test_yandexgpt_factory_from_env_missing() {
        // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        std::env::remove_var("DEPLOY_PLUGIN_YANDEX_API_KEY");
        std::env::remove_var("DEPLOY_PLUGIN_YANDEX_FOLDER_ID");

        let result = YandexGPTClientFactory::from_env();
        assert!(result.is_err());
    }
}