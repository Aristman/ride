use anyhow::{Context, Result};
use std::path::{Path, PathBuf};
use std::time::Duration;
use tokio::process::Command as AsyncCommand;
use tokio::time::timeout;
use tracing::{info, warn, debug, error};
use indicatif::{ProgressBar, ProgressStyle};
use crate::models::plugin::{PluginArtifact, BuildResult};
use crate::config::parser::Config;
use sha2::{Sha256, Digest};

/// –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
pub struct PluginBuilder {
    config: Config,
    project_root: PathBuf,
}

impl PluginBuilder {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏–ª–¥–µ—Ä–∞
    pub fn new(config: Config, project_root: PathBuf) -> Self {
        Self {
            config,
            project_root,
        }
    }

    /// –°–æ–±–∏—Ä–∞–µ—Ç –ø–ª–∞–≥–∏–Ω —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    pub async fn build(&self, version: Option<String>, profile: &str) -> Result<BuildResult> {
        info!("üî® –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –ø–ª–∞–≥–∏–Ω–∞");

        let start_time = std::time::Instant::now();
        let mut logs = Vec::new();
        let mut errors = Vec::new();

        // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
        let project_type = self.detect_project_type().await?;
        logs.push(format!("üìÅ –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {:?}", project_type));

        // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        if let Err(e) = self.validate_project_structure(&project_type).await {
            let error_msg = format!("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
            error!("{}", error_msg);
            errors.push(error_msg);
            return Ok(BuildResult {
                success: false,
                artifact: None,
                metadata: None,
                build_time: chrono::Utc::now(),
                logs,
                errors,
            });
        }

        // 3. –°–±–æ—Ä–∫–∞
        let mut artifact = match self.build_plugin(&project_type, profile, &mut logs, &mut errors).await {
            Ok(artifact) => {
                logs.push("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ".to_string());
                Some(artifact)
            }
            Err(e) => {
                let error_msg = format!("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {}", e);
                error!("{}", error_msg);
                errors.push(error_msg);
                None
            }
        };

        // 3.1. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏ –æ–±–Ω–æ–≤–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if let (Some(ref mut art), Some(ref ver)) = (&mut artifact, &version) {
            if let Some(path) = art.file_path.parent() {
                let old_name = art.file_name.clone();
                let new_name = Self::apply_version_to_filename(&old_name, ver);
                let new_path = path.join(&new_name);
                // –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
                if let Err(e) = std::fs::rename(&art.file_path, &new_path) {
                    warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥ –≤–µ—Ä—Å–∏—é {}: {}", ver, e);
                } else {
                    info!("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {} -> {}", old_name, new_name);
                    art.file_name = new_name;
                    art.file_path = new_path;
                    art.version = ver.clone();
                    // –†–∞–∑–º–µ—Ä/—á–µ–∫—Å—É–º–º–∞ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ rename
                }
            }
        }

        // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        if let Some(ref artifact) = artifact {
            if let Err(e) = self.validate_artifact(artifact).await {
                let error_msg = format!("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
                error!("{}", error_msg);
                errors.push(error_msg);
                return Ok(BuildResult {
                    success: false,
                    artifact: Some(artifact.clone()),
                    metadata: None,
                    build_time: chrono::Utc::now(),
                    logs,
                    errors,
                });
            }
        }

        let build_time = chrono::Utc::now();
        let duration = start_time.elapsed();

        logs.push(format!("‚è±Ô∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: {:?}", duration));

        let success = artifact.is_some() && errors.is_empty();

        Ok(BuildResult {
            success,
            artifact,
            metadata: None, // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            build_time,
            logs,
            errors,
        })
    }

    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (Gradle/Maven)
    async fn detect_project_type(&self) -> Result<ProjectType> {
        debug!("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {:?}", self.project_root);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Gradle
        if self.project_root.join("build.gradle").exists() ||
           self.project_root.join("build.gradle.kts").exists() {
            info!("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω Gradle –ø—Ä–æ–µ–∫—Ç");
            return Ok(ProjectType::Gradle);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Maven
        if self.project_root.join("pom.xml").exists() {
            info!("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω Maven –ø—Ä–æ–µ–∫—Ç");
            return Ok(ProjectType::Maven);
        }

        Err(anyhow::anyhow!(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç build.gradle, build.gradle.kts –∏–ª–∏ pom.xml"
        ))
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    async fn validate_project_structure(&self, project_type: &ProjectType) -> Result<()> {
        debug!("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {:?}", project_type);

        match project_type {
            ProjectType::Gradle => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º Gradle wrapper
                if !self.project_root.join("gradlew").exists() {
                    warn!("‚ö†Ô∏è Gradle wrapper –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π gradle");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º src/main/kotlin –∏–ª–∏ src/main/java
                let kotlin_src = self.project_root.join("src/main/kotlin");
                let java_src = self.project_root.join("src/main/java");

                if !kotlin_src.exists() && !java_src.exists() {
                    return Err(anyhow::anyhow!(
                        "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ (src/main/kotlin –∏–ª–∏ src/main/java)"
                    ));
                }
            }
            ProjectType::Maven => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é Maven —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                let src_main = self.project_root.join("src/main/java");
                if !src_main.exists() {
                    return Err(anyhow::anyhow!(
                        "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ (src/main/java)"
                    ));
                }
            }
        }

        Ok(())
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±–æ—Ä–∫—É –ø–ª–∞–≥–∏–Ω–∞
    async fn build_plugin(
        &self,
        project_type: &ProjectType,
        profile: &str,
        logs: &mut Vec<String>,
        errors: &mut Vec<String>,
    ) -> Result<PluginArtifact> {
        let progress = ProgressBar::new_spinner();
        progress.set_style(
            ProgressStyle::default_spinner()
                .template("{spinner:.green} [{elapsed_precise}] {msg}")
                .unwrap()
        );
        progress.set_message("üî® –°–±–æ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...");
        progress.enable_steady_tick(Duration::from_millis(100));

        let result = match project_type {
            ProjectType::Gradle => self.build_gradle(profile, logs, errors).await,
            ProjectType::Maven => self.build_maven(profile, logs, errors).await,
        };

        progress.finish_with_message("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        result
    }

    /// –°–±–æ—Ä–∫–∞ Gradle –ø—Ä–æ–µ–∫—Ç–∞
    async fn build_gradle(
        &self,
        profile: &str,
        logs: &mut Vec<String>,
        errors: &mut Vec<String>,
    ) -> Result<PluginArtifact> {
        info!("üî® –ó–∞–ø—É—Å–∫ Gradle —Å–±–æ—Ä–∫–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {}", profile);
        logs.push(format!("–ó–∞–ø—É—Å–∫ Gradle —Å–±–æ—Ä–∫–∏: gradle {}", self.config.build.gradle_task));

        let gradle_cmd = if self.project_root.join("gradlew").exists() {
            "./gradlew"
        } else {
            "gradle"
        };

        let mut args: Vec<&str> = vec![&self.config.build.gradle_task];
        if !self.config.build.build_args.is_empty() {
            args.extend(self.config.build.build_args.iter().map(|s| s.as_str()));
        }

        let mut cmd = AsyncCommand::new(gradle_cmd);
        cmd.current_dir(&self.project_root)
           .args(&args);

        debug!("–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {:?}", cmd);

        let output = timeout(Duration::from_secs(300), cmd.output()).await
            .context("–¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç)")?
            .context("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏")?;

        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);

        if !stdout.is_empty() {
            for line in stdout.lines().take(20) {
                logs.push(format!("üìù {}", line));
            }
        }

        if !stderr.is_empty() {
            for line in stderr.lines().take(10) {
                if line.to_lowercase().contains("error") || line.to_lowercase().contains("failed") {
                    errors.push(format!("‚ùå {}", line));
                } else {
                    logs.push(format!("‚ö†Ô∏è {}", line));
                }
            }
        }

        if !output.status.success() {
            return Err(anyhow::anyhow!(
                "Gradle —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {}: {}",
                output.status,
                stderr.lines().next().unwrap_or("–Ω–µ—Ç –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫")
            ));
        }

        // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        self.find_artifact().await
    }

    /// –°–±–æ—Ä–∫–∞ Maven –ø—Ä–æ–µ–∫—Ç–∞
    async fn build_maven(
        &self,
        profile: &str,
        logs: &mut Vec<String>,
        errors: &mut Vec<String>,
    ) -> Result<PluginArtifact> {
        info!("üî® –ó–∞–ø—É—Å–∫ Maven —Å–±–æ—Ä–∫–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {}", profile);
        logs.push("–ó–∞–ø—É—Å–∫ Maven —Å–±–æ—Ä–∫–∏: mvn package".to_string());

        let mut cmd = AsyncCommand::new("mvn");
        cmd.current_dir(&self.project_root)
           .args(&["package", "-DskipTests"]);

        if profile != "release" {
            cmd.arg("-P").arg(profile);
        }

        debug!("–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {:?}", cmd);

        let output = timeout(Duration::from_secs(300), cmd.output()).await
            .context("–¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç)")?
            .context("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏")?;

        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);

        if !stdout.is_empty() {
            for line in stdout.lines().take(20) {
                logs.push(format!("üìù {}", line));
            }
        }

        if !stderr.is_empty() {
            for line in stderr.lines().take(10) {
                if line.to_lowercase().contains("error") || line.to_lowercase().contains("failed") {
                    errors.push(format!("‚ùå {}", line));
                } else {
                    logs.push(format!("‚ö†Ô∏è {}", line));
                }
            }
        }

        if !output.status.success() {
            return Err(anyhow::anyhow!(
                "Maven —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {}: {}",
                output.status,
                stderr.lines().next().unwrap_or("–Ω–µ—Ç –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫")
            ));
        }

        // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        self.find_artifact().await
    }

    /// –ò—â–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–±–æ—Ä–∫–∏
    async fn find_artifact(&self) -> Result<PluginArtifact> {
        let output_dir = self.project_root.join(&self.config.build.output_dir);
        debug!("–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {:?}", output_dir);

        if !output_dir.exists() {
            return Err(anyhow::anyhow!(
                "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {:?}",
                output_dir
            ));
        }

        let mut zip_files = Vec::new();
        for entry in std::fs::read_dir(&output_dir)? {
            let entry = entry?;
            let path = entry.path();

            if path.is_file() {
                if let Some(extension) = path.extension() {
                    if extension == "zip" {
                        zip_files.push(path);
                    }
                }
            }
        }

        if zip_files.is_empty() {
            return Err(anyhow::anyhow!(
                "ZIP –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {:?}",
                output_dir
            ));
        }

        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        zip_files.sort_by_key(|path| {
            std::fs::metadata(path).and_then(|m| m.modified()).unwrap_or(std::time::UNIX_EPOCH)
        });

        let artifact_path = zip_files.last().unwrap();
        let file_name = artifact_path.file_name()
            .ok_or_else(|| anyhow::anyhow!("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"))?
            .to_string_lossy()
            .to_string();

        let metadata = std::fs::metadata(artifact_path)?;
        let file_size = metadata.len();

        // –í—ã—á–∏—Å–ª—è–µ–º SHA256
        let checksum = self.calculate_checksum(artifact_path)?;

        info!("‚úÖ –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {} ({} bytes)", file_name, file_size);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        let version = self.extract_version_from_filename(&file_name)
            .unwrap_or_else(|| "unknown".to_string());

        Ok(PluginArtifact {
            file_path: artifact_path.clone(),
            file_name,
            file_size,
            checksum_sha256: checksum,
            version,
            build_time: chrono::Utc::now(),
        })
    }

    /// –í—ã—á–∏—Å–ª—è–µ—Ç SHA256 checksum —Ñ–∞–π–ª–∞
    fn calculate_checksum(&self, file_path: &Path) -> Result<String> {
        let mut file = std::fs::File::open(file_path)?;
        let mut hasher = Sha256::new();
        std::io::copy(&mut file, &mut hasher)?;

        let result = hasher.finalize();
        Ok(format!("{:x}", result))
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    fn extract_version_from_filename(&self, filename: &str) -> Option<String> {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω plugin-name-version.zip
        let re = regex::Regex::new(r"-(\d+\.\d+\.\d+(?:-[a-zA-Z0-9]+)*)\.zip$").ok()?;

        if let Some(captures) = re.captures(filename) {
            captures.get(1).map(|m| m.as_str().to_string())
        } else {
            None
        }
    }

    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π. –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –≤ –∏–º–µ–Ω–∏ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∑–∞–º–µ–Ω—è–µ—Ç, –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥ .zip
    fn apply_version_to_filename(filename: &str, version: &str) -> String {
        let re = regex::Regex::new(r"-(\d+\.\d+\.\d+(?:-[a-zA-Z0-9]+)*)\.zip$").ok();
        if let Some(re) = re {
            if re.is_match(filename) {
                return re.replace(filename, format!("-{}.zip", version)).to_string();
            }
        }
        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Å–æ–≤–ø–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ .zip
        if let Some(stripped) = filename.strip_suffix(".zip") {
            return format!("{}-{}.zip", stripped, version);
        }
        // fallback: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å
        format!("{}-{}.zip", filename, version)
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    async fn validate_artifact(&self, artifact: &PluginArtifact) -> Result<()> {
        debug!("–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: {}", artifact.file_name);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if !artifact.file_path.exists() {
            return Err(anyhow::anyhow!(
                "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {:?}",
                artifact.file_path
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if artifact.file_size == 0 {
            return Err(anyhow::anyhow!(
                "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä"
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ZIP –∞—Ä—Ö–∏–≤–∞
        self.validate_zip_structure(&artifact.file_path).await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ plugin.xml
        self.validate_plugin_xml(&artifact.file_path).await?;

        info!("‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω");
        Ok(())
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É ZIP –∞—Ä—Ö–∏–≤–∞
    async fn validate_zip_structure(&self, zip_path: &Path) -> Result<()> {
        let file = std::fs::File::open(zip_path)?;
        let archive = zip::ZipArchive::new(file)?;

        if archive.len() == 0 {
            return Err(anyhow::anyhow!("ZIP –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç"));
        }

        debug!("‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç {} —Ñ–∞–π–ª–æ–≤", archive.len());
        Ok(())
    }

    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ plugin.xml –≤ –∞—Ä—Ö–∏–≤–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω—É—Ç—Ä–∏ JAR —Ñ–∞–π–ª–æ–≤)
    async fn validate_plugin_xml(&self, zip_path: &Path) -> Result<()> {
        let file = std::fs::File::open(zip_path)?;
        let mut archive = zip::ZipArchive::new(file)?;

        // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞—Ä—Ö–∏–≤–∞
        for i in 0..archive.len() {
            let file = archive.by_index(i)?;
            if file.name().ends_with("plugin.xml") || file.name().ends_with("META-INF/plugin.xml") {
                debug!("‚úÖ –ù–∞–π–¥–µ–Ω plugin.xml –≤ –∫–æ—Ä–Ω–µ –∞—Ä—Ö–∏–≤–∞");
                return Ok(());
            }
        }

        // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º JAR-—Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ (–æ–±—ã—á–Ω–æ –≤ lib/)
        for i in 0..archive.len() {
            let mut entry = archive.by_index(i)?;
            let name = entry.name().to_string();
            if name.ends_with(".jar") {
                // –ß–∏—Ç–∞–µ–º jar –≤ –ø–∞–º—è—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ zip
                let mut buf = Vec::with_capacity(entry.size() as usize);
                std::io::copy(&mut entry, &mut buf)?;
                let cursor = std::io::Cursor::new(buf);
                if let Ok(mut jar) = zip::ZipArchive::new(cursor) {
                    for j in 0..jar.len() {
                        let inner = jar.by_index(j)?;
                        if inner.name().ends_with("META-INF/plugin.xml") {
                            debug!("‚úÖ –ù–∞–π–¥–µ–Ω plugin.xml –≤–Ω—É—Ç—Ä–∏ JAR: {}", name);
                            return Ok(());
                        }
                    }
                }
            }
        }

        Err(anyhow::anyhow!("plugin.xml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ –ø–ª–∞–≥–∏–Ω–∞ (–Ω–∏ –≤ –∫–æ—Ä–Ω–µ, –Ω–∏ –≤–Ω—É—Ç—Ä–∏ JAR —Ñ–∞–π–ª–æ–≤)"))
    }
}

/// –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
#[derive(Debug, Clone)]
pub enum ProjectType {
    Gradle,
    Maven,
}

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å zip –≤ Cargo.toml
use zip;