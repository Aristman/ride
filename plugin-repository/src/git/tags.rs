use anyhow::{Context, Result};
use std::path::Path;
use std::process::Command;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use tracing::{info, debug, warn};
use super::history::GitCommit;

/// –ú–æ–¥–µ–ª—å git —Ç–µ–≥–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GitTag {
    pub name: String,
    pub commit_hash: String,
    pub commit_message: String,
    pub author: String,
    pub date: DateTime<Utc>,
    pub is_annotated: bool,
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç—ã —Å git —Ç–µ–≥–∞–º–∏
#[derive(Debug, Clone)]
pub struct GitTags {
    repository_path: std::path::PathBuf,
}

impl GitTags {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–≥–æ–≤
    pub fn new<P: AsRef<Path>>(repository_path: P) -> Self {
        Self {
            repository_path: repository_path.as_ref().to_path_buf(),
        }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    pub async fn get_all_tags(&self) -> Result<Vec<GitTag>> {
        info!("üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–∏—Ç–∞—Ö
        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&[
                "tag", "--sort=-version:refname", "--format=%(refname:short)%00%(objectname)%00%(contents:subject)%00%(authorname)%00%(creatordate)",
            ])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!(
                "Git tag –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {}",
                error_msg
            ));
        }

        let stdout = String::from_utf8_lossy(&output.stdout);
        let tags = self.parse_tags_output(&stdout)?;

        info!("–ü–æ–ª—É—á–µ–Ω–æ {} —Ç–µ–≥–æ–≤", tags.len());
        Ok(tags)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    pub async fn get_latest_tag(&self) -> Result<Option<GitTag>> {
        info!("üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞");

        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&[
                "describe", "--tags", "--abbrev=0"
            ])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: {}", error_msg);
            return Ok(None);
        }

        let tag_name = String::from_utf8_lossy(&output.stdout).trim().to_string();

        if tag_name.is_empty() {
            return Ok(None);
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ
        self.get_tag_info(&tag_name).await.map(Some)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ–≥–µ
    pub async fn get_tag_info(&self, tag_name: &str) -> Result<GitTag> {
        debug!("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ: {}", tag_name);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ diff –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&[
                "show", "-s", "--no-patch", "--pretty=%H|%s|%an|%cI", tag_name
            ])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ {}: {}",
                tag_name, error_msg
            ));
        }

        let stdout = String::from_utf8_lossy(&output.stdout);
        let line_opt = stdout
            .lines()
            .map(|l| l.trim())
            .find(|l| !l.is_empty() && l.matches('|').count() >= 3);

        let line = line_opt
            .ok_or_else(|| anyhow::anyhow!(
                "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç git show –¥–ª—è —Ç–µ–≥–∞ {}: {}",
                tag_name, stdout.trim()
            ))?;

        let parts: Vec<&str> = line.split('|').collect();
        if parts.len() < 4 {
            return Err(anyhow::anyhow!(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ git show –¥–ª—è —Ç–µ–≥–∞ {}: {}",
                tag_name, line
            ));
        }

        let commit_hash = parts[0].to_string();
        let commit_message = parts[1].to_string();
        let author = parts[2].to_string();
        let date_str = parts[3];

        // %cI –≤—ã–¥–∞—ë—Ç ISO 8601 (RFC3339), —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–≥–æ; –ø—Ä–∏ —Å–±–æ–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        let date = DateTime::parse_from_rfc3339(date_str)
            .map(|d| d.with_timezone(&Utc))
            .unwrap_or_else(|_| Utc::now());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        let is_annotated = self.is_annotated_tag(tag_name).await?;

        Ok(GitTag {
            name: tag_name.to_string(),
            commit_hash,
            commit_message,
            author,
            date,
            is_annotated,
        })
    }

    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–≥
    pub async fn create_tag(&self, tag_name: &str, message: Option<&str>) -> Result<()> {
        info!("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞: {}", tag_name);

        let mut args = vec!["tag"];

        if let Some(msg) = message {
            args.push("-a");
            args.push("-m");
            args.push(msg);
        }

        args.push(tag_name);

        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&args)
            .output()
            .context("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ {}: {}",
                tag_name, error_msg
            ));
        }

        info!("‚úÖ –¢–µ–≥ {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", tag_name);
        Ok(())
    }

    /// –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥
    pub async fn delete_tag(&self, tag_name: &str) -> Result<()> {
        info!("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞: {}", tag_name);

        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&["tag", "-d", tag_name])
            .output()
            .context("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ {}: {}",
                tag_name, error_msg
            ));
        }

        info!("‚úÖ –¢–µ–≥ {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", tag_name);
        Ok(())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏
    pub async fn get_commits_between_tags(&self, from_tag: &str, to_tag: &str) -> Result<Vec<GitCommit>> {
        info!("üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ {}..{}", from_tag, to_tag);

        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&[
                "log",
                "--pretty=format:%H|%h|%s|%an|%ae|%ai",
                "--numstat",
                &format!("{}..{}", from_tag, to_tag)
            ])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏")?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(anyhow::anyhow!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏: {}",
                error_msg
            ));
        }

        let stdout = String::from_utf8_lossy(&output.stdout);
        let commits = self.parse_git_log(&stdout)?;

        info!("–ü–æ–ª—É—á–µ–Ω–æ {} –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏", commits.len());
        Ok(commits)
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –¥–æ HEAD
    pub async fn get_commits_since_last_tag(&self) -> Result<Vec<GitCommit>> {
        if let Some(latest_tag) = self.get_latest_tag().await? {
            self.get_commits_between_tags(&latest_tag.name, "HEAD").await
        } else {
            // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
            super::GitHistory::new(&self.repository_path).get_recent_commits(10).await
        }
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤
    pub async fn suggest_next_version(&self, current_pattern: &str) -> Result<String> {
        info!("üîç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤");

        let tags = self.get_all_tags().await?;
        let matching_tags: Vec<&GitTag> = tags.iter()
            .filter(|tag| tag.name.starts_with(current_pattern))
            .collect();

        if matching_tags.is_empty() {
            return Ok(format!("{}0.1.0", current_pattern));
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
        let latest_tag = matching_tags.first().unwrap();
        let current_version = &latest_tag.name;

        // –ü—Ä–æ—Å—Ç–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        if let Some(version_number) = current_version.strip_prefix(current_pattern) {
            if let Some(version) = self.increment_version(version_number) {
                return Ok(format!("{}{}", current_pattern, version));
            }
        }

        Ok(format!("{}1.0.0", current_pattern))
    }

    /// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é –ø–æ semantic versioning
    fn increment_version(&self, version: &str) -> Option<String> {
        let parts: Vec<&str> = version.split('.').collect();
        if parts.len() != 3 {
            return None;
        }

        let major: u32 = parts[0].parse().ok()?;
        let minor: u32 = parts[1].parse().ok()?;
        let patch: u32 = parts[2].parse().ok()?;

        // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º patch –≤–µ—Ä—Å–∏—é
        Some(format!("{}.{}.{}", major, minor, patch + 1))
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    async fn is_annotated_tag(&self, tag_name: &str) -> Result<bool> {
        let output = Command::new("git")
            .current_dir(&self.repository_path)
            .args(&["cat-file", "-p", &format!("refs/tags/{}", tag_name)])
            .output()
            .context("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ç–µ–≥–∞")?;

        // –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ
        Ok(output.status.success())
    }

    /// –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ git log (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ GitHistory)
    fn parse_git_log(&self, log_output: &str) -> Result<Vec<GitCommit>> {
        let mut commits = Vec::new();
        let mut current_commit: Option<GitCommit> = None;

        for line in log_output.lines() {
            if line.trim().is_empty() {
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–æ–º–º–∏—Ç–∞
            if line.contains('|') && line.chars().filter(|c| *c == '|').count() >= 5 {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–∏—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if let Some(commit) = current_commit.take() {
                    commits.push(commit);
                }

                // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–º–∏—Ç–∞
                let parts: Vec<&str> = line.split('|').collect();
                if parts.len() >= 6 {
                    let date_str = parts[5];
                    let date = DateTime::parse_from_rfc3339(date_str)
                        .unwrap_or_else(|_| DateTime::parse_from_str(date_str, "%Y-%m-%d %H:%M:%S %z").unwrap_or_else(|_| Utc::now().into()))
                        .with_timezone(&Utc);

                    current_commit = Some(GitCommit {
                        hash: parts[0].to_string(),
                        short_hash: parts[1].to_string(),
                        message: parts[2].to_string(),
                        author: parts[3].to_string(),
                        email: parts[4].to_string(),
                        date,
                        files_changed: 0,
                        insertions: 0,
                        deletions: 0,
                    });
                }
            } else if let Some(ref mut commit) = current_commit {
                // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
                if let Some((insertions, deletions)) = self.parse_file_stats_line(line) {
                    commit.insertions += insertions;
                    commit.deletions += deletions;
                    commit.files_changed += 1;
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        if let Some(commit) = current_commit {
            commits.push(commit);
        }

        Ok(commits)
    }

    /// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    fn parse_file_stats_line(&self, line: &str) -> Option<(u32, u32)> {
        let parts: Vec<&str> = line.split_whitespace().collect();
        if parts.len() >= 2 {
            let (insertions, deletions) = (parts[0], parts[1]);

            let insertions = if insertions == "-" {
                0
            } else {
                insertions.parse().unwrap_or(0)
            };

            let deletions = if deletions == "-" {
                0
            } else {
                deletions.parse().unwrap_or(0)
            };

            Some((insertions, deletions))
        } else {
            None
        }
    }

    /// –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ git tags
    fn parse_tags_output(&self, output: &str) -> Result<Vec<GitTag>> {
        let mut tags = Vec::new();

        for line in output.lines() {
            if line.trim().is_empty() {
                continue;
            }

            // –§–æ—Ä–º–∞—Ç: tag_name|commit_hash|message|author|date
            let parts: Vec<&str> = line.split('\x00').collect();
            if parts.len() < 5 {
                continue;
            }

            let tag_name = parts[0].trim().to_string();
            let commit_hash = parts[1].trim().to_string();
            let commit_message = parts[2].trim().to_string();
            let author = parts[3].trim().to_string();
            let date_str = parts[4].trim();

            let date = DateTime::parse_from_rfc3339(date_str)
                .unwrap_or_else(|_| DateTime::parse_from_str(date_str, "%Y-%m-%d %H:%M:%S %z").unwrap_or_else(|_| Utc::now().into()))
                .with_timezone(&Utc);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            let is_annotated = false; // TODO: —Å–¥–µ–ª–∞—Ç—å async –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            tags.push(GitTag {
                name: tag_name,
                commit_hash,
                commit_message,
                author,
                date,
                is_annotated,
            });
        }

        Ok(tags)
    }
}

