use anyhow::{Context, Result};
use tracing::info;
use colored::*;
use crate::config::parser::Config;
use crate::core::llm::agents::{LLMAgentManager, VersionInfo, PluginInfo};
use crate::cli::ai::{AiCommand, AiSubcommand, ChangelogCommand, SuggestVersionCommand, ReleaseNotesCommand};

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI –∫–æ–º–∞–Ω–¥
pub async fn handle_ai_command(
    command: AiCommand,
    config_file: &str,
) -> Result<()> {
    info!("ü§ñ –ó–∞–ø—É—Å–∫ AI –∫–æ–º–∞–Ω–¥—ã");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.validate()
        .with_context(|| "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤
    let agent_manager = LLMAgentManager::from_config(&config)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤")?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT API
    if !agent_manager.health_check().await? {
        eprintln!("{} YandexGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", "‚ùå".red());
        return Err(anyhow::anyhow!("YandexGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
    match command.subcommand {
        AiSubcommand::Changelog(cmd) => {
            handle_changelog_command(cmd, agent_manager).await
        }
        AiSubcommand::SuggestVersion(cmd) => {
            handle_suggest_version_command(cmd, agent_manager).await
        }
        AiSubcommand::ReleaseNotes(cmd) => {
            handle_release_notes_command(cmd, agent_manager).await
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã changelog
async fn handle_changelog_command(
    command: ChangelogCommand,
    agent_manager: LLMAgentManager,
) -> Result<()> {
    println!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog");

    // –ü–æ–ª—É—á–∞–µ–º git –∏—Å—Ç–æ—Ä–∏—é
    let git_log = get_git_history(&command.since).await?;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    let version_info = VersionInfo {
        current_version: "1.0.0".to_string(), // TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ git tags
        new_version: Some("1.1.0".to_string()), // TODO: –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
        branch: "main".to_string(), // TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        git_log: Some(git_log),
        changes_count: 0, // TODO: –°—á–∏—Ç–∞—Ç—å –∫–æ–º–º–∏—Ç—ã
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog
    let changelog = agent_manager.generate_changelog(&version_info).await?;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_changelog_result(&changelog);

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã suggest-version
async fn handle_suggest_version_command(
    command: SuggestVersionCommand,
    agent_manager: LLMAgentManager,
) -> Result<()> {
    println!("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏");

    let git_log = if command.analyze_commits {
        Some(get_git_history(&None).await?)
    } else {
        None
    };

    let version_info = VersionInfo {
        current_version: "1.0.0".to_string(), // TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ git tags
        new_version: None,
        branch: "main".to_string(),
        git_log,
        changes_count: 0,
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é
    let analysis = agent_manager.suggest_version(&version_info).await?;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_version_analysis_result(&analysis);

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã release-notes
async fn handle_release_notes_command(
    command: ReleaseNotesCommand,
    agent_manager: LLMAgentManager,
) -> Result<()> {
    println!("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è release notes");

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ
    let plugin_info = PluginInfo {
        name: "Ride".to_string(), // TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        id: "ru.marslab.ide.ride".to_string(),
        version: "1.1.0".to_string(),
        description: Some("AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è IntelliJ IDEA".to_string()),
    };

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π changelog –¥–ª—è —Ç–µ—Å—Ç–∞
    let changelog = "## –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ v1.1.0

üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YandexGPT
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
- –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

üîß –£–ª—É—á—à–µ–Ω–∏—è:
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏
- –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π";

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º release notes
    let version = "1.1.0"; // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ git tags
    let release_notes = agent_manager.generate_release_notes(version, changelog, &plugin_info).await?;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_release_notes_result(&release_notes);

    Ok(())
}

/// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é git –∫–æ–º–º–∏—Ç–æ–≤
async fn get_git_history(since_tag: &Option<String>) -> Result<String> {
    use std::process::Command;

    let mut cmd = Command::new("git");
    cmd.args(&["log", "--oneline", "--no-merges"]);

    if let Some(tag) = since_tag {
        cmd.args(&[format!("{}..HEAD", tag)]);
    } else {
        cmd.args(&["-10"]); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤
    }

    let output = cmd.output()
        .context("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git log")?;

    if !output.status.success() {
        return Err(anyhow::anyhow!(
            "Git log –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {}",
            String::from_utf8_lossy(&output.stderr)
        ));
    }

    let git_log = String::from_utf8_lossy(&output.stdout);
    Ok(git_log.to_string())
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
fn print_changelog_result(changelog: &crate::core::llm::agents::GeneratedChangelog) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üìã CHANGELOG v{}", changelog.version);
    println!("{}", "=".repeat(60).bright_black());

    for section in &changelog.sections {
        println!("\n{} {}", section.emoji, section.title.bright_blue());
        println!("{}", "-".repeat(40).bright_black());

        if section.changes.is_empty() {
            println!("  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        } else {
            for change in &section.changes {
                println!("  ‚Ä¢ {}", change);
            }
        }
    }

    println!("\nüìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", changelog.total_changes);
    println!("{}", "=".repeat(60).bright_black());
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π
fn print_version_analysis_result(analysis: &crate::core::llm::agents::VersionAnalysis) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üîç –ê–ù–ê–õ–ò–ó –í–ï–†–°–ò–ò");
    println!("{}", "=".repeat(60).bright_black());

    println!("üìà –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {}", analysis.suggested_version.bright_green());
    println!("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.1}%", analysis.confidence * 100.0);
    println!("üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {}", analysis.reasoning);

    if !analysis.change_types.is_empty() {
        println!("üìã –¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", analysis.change_types.join(", "));
    }

    println!("{}", "=".repeat(60).bright_black());
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes
fn print_release_notes_result(notes: &crate::core::llm::agents::GeneratedReleaseNotes) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üìù RELEASE NOTES v{}", notes.version);
    println!("{}", "=".repeat(60).bright_black());

    println!("\n{}\n", notes.title.bright_blue().bold());

    if !notes.highlights.is_empty() {
        println!("üåü –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:");
        for highlight in &notes.highlights {
            println!("  ‚Ä¢ {}", highlight);
        }
        println!();
    }

    if !notes.body.is_empty() {
        println!("{}", notes.body);
    }

    println!("\n{}", notes.subtitle);
    println!("{}", "=".repeat(60).bright_black());
}