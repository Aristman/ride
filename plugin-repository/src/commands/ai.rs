use anyhow::{Context, Result};
use tracing::info;
use colored::*;
use crate::config::parser::Config;
use crate::core::llm::agents::{LLMAgentManager, PluginInfo};
use crate::cli::ai::{AiCommand, AiSubcommand, ChangelogCommand, SuggestVersionCommand, ReleaseNotesCommand};
use crate::git::GitRepository;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI –∫–æ–º–∞–Ω–¥
pub async fn handle_ai_command(
    command: AiCommand,
    config_file: &str,
) -> Result<()> {
    info!("ü§ñ –ó–∞–ø—É—Å–∫ AI –∫–æ–º–∞–Ω–¥—ã");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.validate()
        .with_context(|| "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;

    // –°–æ–∑–¥–∞–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    let current_dir = std::env::current_dir()
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;
    let git_repo = GitRepository::new(&current_dir);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if !git_repo.is_valid_repository() {
        eprintln!("{} –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º", "‚ùå".red());
        return Err(anyhow::anyhow!("–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"));
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤
    let agent_manager = LLMAgentManager::from_config(&config)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤")?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT API
    if !agent_manager.health_check().await? {
        eprintln!("{} YandexGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", "‚ùå".red());
        return Err(anyhow::anyhow!("YandexGPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
    match command.subcommand {
        AiSubcommand::Changelog(cmd) => {
            handle_changelog_command(cmd, agent_manager, git_repo).await
        }
        AiSubcommand::SuggestVersion(cmd) => {
            handle_suggest_version_command(cmd, agent_manager, git_repo).await
        }
        AiSubcommand::ReleaseNotes(cmd) => {
            handle_release_notes_command(cmd, agent_manager, git_repo).await
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã changelog
async fn handle_changelog_command(
    command: ChangelogCommand,
    agent_manager: LLMAgentManager,
    git_repo: GitRepository,
) -> Result<()> {
    println!("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog —Å –∞–Ω–∞–ª–∏–∑–æ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    let current_branch = git_repo.history.get_current_branch().await
        .unwrap_or_else(|_| "main".to_string());

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    let latest_tag = git_repo.tags.get_latest_tag().await?;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º from –∏ to –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    let from_tag = command.since.as_ref().or_else(|| latest_tag.as_ref().map(|t| &t.name));
    let to_tag = command.to.as_deref();

    println!("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {:?} ‚Üí {:?}", from_tag, to_tag);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog —á–µ—Ä–µ–∑ Git –∞–Ω–∞–ª–∏–∑
    let changelog = if command.use_git_analysis {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        let (analysis, _) = git_repo.get_full_analysis(from_tag.map(|s| s.as_str()), to_tag).await?;
        agent_manager.changelog_agent.generate_enhanced_changelog(&git_repo, &analysis).await?
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        agent_manager.changelog_agent.generate_changelog_from_repo(&git_repo, from_tag.map(|s| s.as_str()), to_tag).await?
    };

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_changelog_result(&changelog, command.verbose);

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if let Some(output_file) = &command.output {
        save_changelog_to_file(&changelog, output_file)?;
        println!("üíæ Changelog —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {}", output_file.green());
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã suggest-version
async fn handle_suggest_version_command(
    command: SuggestVersionCommand,
    agent_manager: LLMAgentManager,
    git_repo: GitRepository,
) -> Result<()> {
    println!("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
    let current_version = if let Some(latest_tag) = git_repo.tags.get_latest_tag().await? {
        latest_tag.name
    } else {
        command.current_version.clone().unwrap_or_else(|| "1.0.0".to_string())
    };

    println!("üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {}", current_version.bright_blue());

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    let analysis = if command.use_semantic_analysis {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ Git –∞–Ω–∞–ª–∏–∑–∞
        agent_manager.version_agent.suggest_semantic_version(&git_repo, &current_version).await?
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        agent_manager.version_agent.suggest_version_from_repo(&git_repo, &current_version).await?
    };

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_version_analysis_result(&analysis, &current_version);

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    if command.apply {
        println!("üöÄ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: {}", analysis.suggested_version.green());
        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞)
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã release-notes
async fn handle_release_notes_command(
    _command: ReleaseNotesCommand,
    agent_manager: LLMAgentManager,
    git_repo: GitRepository,
) -> Result<()> {
    println!("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è release notes —Å –∞–Ω–∞–ª–∏–∑–æ–º Git");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ
    let (analysis, _commits, latest_tag) = git_repo.get_changes_since_last_release().await?;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    let version = if let Some(tag) = &latest_tag {
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é
        git_repo.suggest_next_version(&tag.name).await?
    } else {
        "1.0.0".to_string() // –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog –¥–ª—è release notes
    let changelog = git_repo.generate_changelog(latest_tag.as_ref().map(|t| t.name.as_str()), Some("HEAD")).await?;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ
    let plugin_info = PluginInfo {
        name: "Ride".to_string(), // TODO: –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        id: "ru.marslab.ide.ride".to_string(),
        version: version.clone(),
        description: Some("AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è IntelliJ IDEA".to_string()),
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º release notes
    let release_notes = agent_manager.generate_release_notes(&version, &changelog, &plugin_info).await?;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_release_notes_result(&release_notes, &analysis);

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if let Some(output_file) = &_command.output {
        save_release_notes_to_file(&release_notes, output_file)?;
        println!("üíæ Release notes —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {}", output_file.green());
    }

    Ok(())
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
fn print_changelog_result(changelog: &crate::core::llm::agents::GeneratedChangelog, verbose: bool) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üìã CHANGELOG v{}", changelog.version);
    println!("{}", "=".repeat(60).bright_black());

    for section in &changelog.sections {
        println!("\n{} {}", section.emoji, section.title.bright_blue());
        println!("{}", "-".repeat(40).bright_black());

        if section.changes.is_empty() {
            println!("  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        } else {
            for change in &section.changes {
                println!("  ‚Ä¢ {}", change);
            }
        }
    }

    println!("\nüìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", changelog.total_changes);

    if verbose {
        println!("üìÑ –ü–æ–ª–Ω—ã–π changelog:");
        println!("{}", changelog.changelog);
    }

    println!("{}", "=".repeat(60).bright_black());
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π
fn print_version_analysis_result(analysis: &crate::core::llm::agents::VersionAnalysis, current_version: &str) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üîç –ê–ù–ê–õ–ò–ó –í–ï–†–°–ò–ò");
    println!("{}", "=".repeat(60).bright_black());

    println!("üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {}", current_version.bright_blue());
    println!("üìà –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {}", analysis.suggested_version.bright_green());
    println!("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.1}%", analysis.confidence * 100.0);
    println!("üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {}", analysis.reasoning);

    if !analysis.change_types.is_empty() {
        println!("üìã –¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", analysis.change_types.join(", "));
    }

    println!("{}", "=".repeat(60).bright_black());
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes
fn print_release_notes_result(
    notes: &crate::core::llm::agents::GeneratedReleaseNotes,
    analysis: &crate::git::ReleaseAnalysis,
) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üìù RELEASE NOTES v{}", notes.version);
    println!("{}", "=".repeat(60).bright_black());

    println!("\n{}\n", notes.title.bright_blue().bold());

    if !notes.highlights.is_empty() {
        println!("üåü –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:");
        for highlight in &notes.highlights {
            println!("  ‚Ä¢ {}", highlight);
        }
        println!();
    }

    if !notes.body.is_empty() {
        println!("{}", notes.body);
    }

    println!("\n{}", notes.subtitle);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ª–∏–∑–∞:");
    println!("  ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: {}", analysis.total_commits);
    println!("  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {}", analysis.breaking_changes.len());

    if !analysis.change_summary.is_empty() {
        println!("  ‚Ä¢ –¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π:");
        for (change_type, count) in &analysis.change_summary {
            println!("    - {}: {}", change_type.name(), count);
        }
    }

    println!("{}", "=".repeat(60).bright_black());
}

/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç changelog –≤ —Ñ–∞–π–ª
fn save_changelog_to_file(changelog: &crate::core::llm::agents::GeneratedChangelog, file_path: &str) -> Result<()> {
    use std::fs;

    let content = format!("# CHANGELOG v{}\n\n{}", changelog.version, changelog.changelog);
    fs::write(file_path, content)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å changelog –≤ —Ñ–∞–π–ª: {}", file_path))?;

    Ok(())
}

/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç release notes –≤ —Ñ–∞–π–ª
fn save_release_notes_to_file(notes: &crate::core::llm::agents::GeneratedReleaseNotes, file_path: &str) -> Result<()> {
    use std::fs;

    let content = format!("# RELEASE NOTES v{}\n\n{}\n\n{}\n\n{}",
        notes.version,
        notes.title,
        notes.body,
        notes.subtitle);
    fs::write(file_path, content)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å release notes –≤ —Ñ–∞–π–ª: {}", file_path))?;

    Ok(())
}