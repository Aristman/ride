use anyhow::{Context, Result};
use colored::*;
use tracing::{info, warn};

use crate::cli::publish::PublishCommand;
use crate::config::parser::Config;
use crate::core::builder::PluginBuilder;
use crate::core::deployer::Deployer;
use crate::core::releaser::ReleaseManager;
use crate::core::llm::agents::LLMAgentManager;
use crate::git::GitRepository;
use std::path::{Path, PathBuf};

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
pub async fn handle_publish_command(cmd: PublishCommand, config_file: &str) -> Result<()> {
    info!("üß© –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");

    // 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;
    if !cmd.skip_validation {
        config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
    }

    let project_root = std::env::current_dir().context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;
    let git_repo = GitRepository::new(&project_root);
    if !git_repo.is_valid_repository() {
        anyhow::bail!("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM/Release –º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
    let agent_manager = LLMAgentManager::from_config(&config)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å LLM –∞–≥–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")?;
    let releaser = ReleaseManager::new(git_repo.clone(), agent_manager, config.project.clone());

    // 2) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    let version = if let Some(v) = cmd.version.clone() {
        v
    } else if cmd.auto_version {
        let prep = releaser.prepare_release(None).await?;
        if !prep.success {
            anyhow::bail!("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å");
        }
        prep.release.version
    } else {
        anyhow::bail!("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --version –∏–ª–∏ --auto-version");
    };

    println!("{} –í–µ—Ä—Å–∏—è: {}", "üè∑Ô∏è", version.bright_green());

    // 3) –û–±–æ–≥–∞—â–µ–Ω–∏–µ plugin.xml (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –¥–æ —Å–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã –º–µ—Ç–∞ –ø–æ–ø–∞–ª–∞ –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    if !cmd.no_ai {
        if let Err(e) = enrich_plugin_xml(&project_root, &config, &version, Some((&git_repo, &releaser))).await {
            warn!("AI/–æ–±–æ–≥–∞—â–µ–Ω–∏–µ plugin.xml: {} (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)", e);
        }
    } else {
        // –î–∞–∂–µ –±–µ–∑ AI –∑–∞–ø–æ–ª–Ω–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è (id/name/version) –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        if let Err(e) = enrich_plugin_xml(&project_root, &config, &version, None).await {
            warn!("–û–±–æ–≥–∞—â–µ–Ω–∏–µ plugin.xml –±–µ–∑ AI: {} (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)", e);
        }
    }

    // 4) –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    let builder = PluginBuilder::new(config.clone(), project_root.clone());
    let build_res = builder.build(Some(version.clone()), &cmd.profile).await?;
    if !build_res.success {
        anyhow::bail!("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏");
    }
    println!("{} –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "‚úÖ");

    // 5) –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ (–µ—Å–ª–∏ –Ω–µ dry-run)

    if cmd.dry_run {
        println!("{} DRY RUN ‚Äî —Ä–µ–ª–∏–∑ –∏ –¥–µ–ø–ª–æ–π –ø—Ä–æ–ø—É—â–µ–Ω—ã", "üß™");
        return Ok(());
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–æ–≥–∞—â–∞–µ–º —Ä–µ–ª–∏–∑ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç LLM, –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ñ–ª–∞–≥–æ–º
    let mut release_message: Option<String> = None;
    if !cmd.no_ai {
        match releaser.prepare_release(Some(version.clone())).await {
            Ok(prep) => {
                if let Some(notes) = prep.release.release_notes {
                    release_message = Some(notes);
                } else if let Some(changelog) = prep.release.changelog {
                    release_message = Some(format!("Changelog for v{}\n\n{}", version, changelog));
                }
            }
            Err(e) => {
                warn!("AI-–æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {}", e);
            }
        }
    } else {
        info!("AI-–æ–±–æ–≥–∞—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ñ–ª–∞–≥–æ–º --no-ai");
    }

    println!("{} –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞...", "üöÄ");
    let _tag = releaser.create_release(&version, release_message).await?;
    println!("{} –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω", "‚úÖ");

    println!("{} –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞...", "üì§");
    releaser.publish_release(&version).await?;
    println!("{} –†–µ–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", "‚úÖ");

    // 6) –î–µ–ø–ª–æ–π
    let deployer = Deployer::new(config.clone());
    if !cmd.skip_validation {
        if let Err(e) = deployer.validate().await {
            if cmd.force {
                warn!("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {} (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑-–∑–∞ --force)", e);
            } else {
                anyhow::bail!("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
            }
        }
    }

    println!("{} –î–µ–ø–ª–æ–π...", "üöö");
    deployer.deploy(cmd.force, cmd.rollback_on_failure).await?;
    println!("{} –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω", "‚úÖ");

    Ok(())
}

/// –û–±–Ω–æ–≤–ª—è–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç META-INF/plugin.xml, –∑–∞–ø–æ–ª–Ω—è—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è.
async fn enrich_plugin_xml(
    project_root: &Path,
    config: &Config,
    version: &str,
    ai_context: Option<(&GitRepository, &ReleaseManager)>,
) -> Result<()> {
    use xmltree::{Element, XMLNode};
    use std::fs;

    // –ü—É—Ç—å –∫ plugin.xml (Gradle/Maven –æ–¥–∏–Ω–∞–∫–æ–≤–æ)
    let meta_inf = project_root.join("src/main/resources/META-INF");
    fs::create_dir_all(&meta_inf).ok();
    let plugin_xml_path = meta_inf.join("plugin.xml");

    // –°–∫–µ–ª–µ—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    let mut root: Element = if plugin_xml_path.exists() {
        let data = fs::read_to_string(&plugin_xml_path)
            .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {}", plugin_xml_path.display()))?;
        Element::parse(data.as_bytes()).with_context(|| "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ plugin.xml")?
    } else {
        Element::new("idea-plugin")
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    fn get_child_mut<'a>(root: &'a mut Element, name: &str) -> Option<&'a mut Element> {
        root.get_mut_child(name)
    }
    fn ensure_text_child(root: &mut Element, name: &str, text: &str) {
        if root.get_child(name).is_none() {
            let mut el = Element::new(name);
            el.children.push(XMLNode::Text(text.to_string()));
            root.children.push(XMLNode::Element(el));
        }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ
    ensure_text_child(&mut root, "id", &config.project.id);
    ensure_text_child(&mut root, "name", &config.project.name);
    ensure_text_child(&mut root, "version", version);

    // vendor: –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–±–µ—Ä–µ–º –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞)

    // idea-version: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
    // (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –±—Ä–∞—Ç—å since-build/until-build –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å)

    // –û–ø–∏—Å–∞–Ω–∏–µ/–Ω–æ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    let mut description_to_set: Option<String> = None;
    let mut changelog_to_set: Option<String> = None;

    if root.get_child("description").is_none() || root.get_child("change-notes").is_none() {
        if let Some((_git, releaser)) = ai_context {
            if let Ok(prep) = releaser.prepare_release(Some(version.to_string())).await {
                if root.get_child("description").is_none() {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º release notes –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç
                    if let Some(notes) = prep.release.release_notes.clone() {
                        description_to_set = Some(notes);
                    }
                }
                if root.get_child("change-notes").is_none() {
                    if let Some(changelog) = prep.release.changelog.clone() {
                        changelog_to_set = Some(changelog);
                    }
                }
            }
        }
    }

    if root.get_child("description").is_none() {
        if let Some(desc) = description_to_set {
            let mut el = Element::new("description");
            el.children.push(XMLNode::CData(desc));
            root.children.push(XMLNode::Element(el));
        }
    }
    if root.get_child("change-notes").is_none() {
        if let Some(ch) = changelog_to_set {
            let mut el = Element::new("change-notes");
            el.children.push(XMLNode::CData(ch));
            root.children.push(XMLNode::Element(el));
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    let mut buf = Vec::new();
    root.write(&mut buf).with_context(|| "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å plugin.xml")?;
    fs::write(&plugin_xml_path, buf).with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {}", plugin_xml_path.display()))?;

    info!(
        "–û–±–Ω–æ–≤–ª–µ–Ω META-INF/plugin.xml (id/name/version/description/change-notes –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)"
    );
    Ok(())
}
