use anyhow::{Context, Result};
use colored::*;
use tracing::{info, warn};

use crate::cli::publish::PublishCommand;
use crate::config::parser::Config;
use crate::core::builder::PluginBuilder;
use crate::core::deployer::Deployer;
use crate::core::releaser::ReleaseManager;
use crate::core::llm::agents::LLMAgentManager;
use crate::git::GitRepository;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
pub async fn handle_publish_command(cmd: PublishCommand, config_file: &str) -> Result<()> {
    info!("üß© –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");

    // 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;
    if !cmd.skip_validation {
        config.validate().context("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;
    }

    let project_root = std::env::current_dir().context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;
    let git_repo = GitRepository::new(&project_root);
    if !git_repo.is_valid_repository() {
        anyhow::bail!("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º");
    }

    // 2) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    let version = if let Some(v) = cmd.version.clone() {
        v
    } else if cmd.auto_version {
        let agent_manager = LLMAgentManager::from_config(&config)
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å LLM –∞–≥–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")?;
        let releaser = ReleaseManager::new(git_repo.clone(), agent_manager, config.project.clone());
        let prep = releaser.prepare_release(None).await?;
        if !prep.success {
            anyhow::bail!("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å");
        }
        prep.release.version
    } else {
        anyhow::bail!("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --version –∏–ª–∏ --auto-version");
    };

    println!("{} –í–µ—Ä—Å–∏—è: {}", "üè∑Ô∏è", version.bright_green());

    // 3) –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    let builder = PluginBuilder::new(config.clone(), project_root.clone());
    let build_res = builder.build(Some(version.clone()), &cmd.profile).await?;
    if !build_res.success {
        anyhow::bail!("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏");
    }
    println!("{} –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "‚úÖ");

    // 4) –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ (–µ—Å–ª–∏ –Ω–µ dry-run)
    let agent_manager = LLMAgentManager::from_config(&config)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å LLM –∞–≥–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")?;
    let releaser = ReleaseManager::new(git_repo.clone(), agent_manager, config.project.clone());

    if cmd.dry_run {
        println!("{} DRY RUN ‚Äî —Ä–µ–ª–∏–∑ –∏ –¥–µ–ø–ª–æ–π –ø—Ä–æ–ø—É—â–µ–Ω—ã", "üß™");
        return Ok(());
    }

    println!("{} –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞...", "üöÄ");
    let _tag = releaser.create_release(&version, None).await?;
    println!("{} –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω", "‚úÖ");

    println!("{} –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞...", "üì§");
    releaser.publish_release(&version).await?;
    println!("{} –†–µ–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", "‚úÖ");

    // 5) –î–µ–ø–ª–æ–π
    let deployer = Deployer::new(config.clone());
    if !cmd.skip_validation {
        if let Err(e) = deployer.validate().await {
            if cmd.force {
                warn!("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {} (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑-–∑–∞ --force)", e);
            } else {
                anyhow::bail!("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
            }
        }
    }

    println!("{} –î–µ–ø–ª–æ–π...", "üöö");
    deployer.deploy(cmd.force, cmd.rollback_on_failure).await?;
    println!("{} –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω", "‚úÖ");

    Ok(())
}
