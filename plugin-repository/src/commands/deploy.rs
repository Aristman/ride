use anyhow::{Context, Result};
use tracing::{info, warn, error};
use crate::cli::deploy::DeployCommand;
use crate::config::parser::Config;
use crate::core::deployer::Deployer;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã deploy
pub async fn handle_deploy_command(
    command: DeployCommand,
    config_file: &str,
) -> Result<()> {
    info!("üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –¥–µ–ø–ª–æ—è");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    let deployer = Deployer::new(config.clone());

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if !command.skip_validation {
        if let Err(e) = deployer.validate().await {
            error!("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
            if !command.force {
                warn!("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
                return Err(anyhow::anyhow!("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"));
            }
            warn!("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å --force, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
    if let Err(e) = deployer.deploy(command.force, command.rollback_on_failure).await {
        error!("–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {}", e);
        if command.rollback_on_failure {
            warn!("–ü—Ä–æ–±—É–µ–º –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è...");
            let _ = deployer.rollback().await;
        }
        return Err(e);
    }

    info!("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω");
    Ok(())
}