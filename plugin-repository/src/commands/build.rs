use anyhow::{Context, Result};
use tracing::info;
use colored::*;
use crate::config::parser::Config;
use crate::core::builder::PluginBuilder;
use crate::cli::build::BuildCommand;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏
pub async fn handle_build_command(
    command: BuildCommand,
    config_file: &str,
) -> Result<()> {
    info!("üî® –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏ –ø–ª–∞–≥–∏–Ω–∞");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.validate()
        .with_context(|| "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    let project_root = std::env::current_dir()
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;

    println!("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {}", project_root.display());
    println!("üîß –ü—Ä–æ—Ñ–∏–ª—å —Å–±–æ—Ä–∫–∏: {}", command.profile);

    if let Some(ref version) = command.version {
        println!("üè∑Ô∏è  –í–µ—Ä—Å–∏—è: {}", version);
    }

    println!();

    // –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä
    let builder = PluginBuilder::new(config, project_root);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä–∫—É
    let result = builder.build(command.version, &command.profile).await?;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_build_result(&result);

    if result.success {
        println!("\n‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        Ok(())
    } else {
        println!("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!");
        Err(anyhow::anyhow!("–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"))
    }
}

/// –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
fn print_build_result(result: &crate::models::plugin::BuildResult) {
    println!("{}", "=".repeat(60).bright_black());
    println!("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ö–ò");
    println!("{}", "=".repeat(60).bright_black());

    // –°—Ç–∞—Ç—É—Å
    let status = if result.success {
        "‚úÖ –£–°–ü–ï–•".green()
    } else {
        "‚ùå –û–®–ò–ë–ö–ê".red()
    };
    println!("–°—Ç–∞—Ç—É—Å: {}", status);

    // –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    println!("–í—Ä–µ–º—è: {}", result.build_time.format("%Y-%m-%d %H:%M:%S"));

    // –ê—Ä—Ç–µ—Ñ–∞–∫—Ç
    if let Some(ref artifact) = result.artifact {
        println!("\nüì¶ –ê–†–¢–ï–§–ê–ö–¢:");
        println!("  –ò–º—è —Ñ–∞–π–ª–∞: {}", artifact.file_name.bright_blue());
        println!("  –†–∞–∑–º–µ—Ä: {} bytes", artifact.file_size);
        println!("  –í–µ—Ä—Å–∏—è: {}", artifact.version.bright_green());
        println!("  SHA256: {}", artifact.checksum_sha256.bright_black());
        println!("  –ü—É—Ç—å: {}", artifact.file_path.display());
    } else {
        println!("\n‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω");
    }

    // –õ–æ–≥–∏
    if !result.logs.is_empty() {
        println!("\nüìù –õ–û–ì–ò –°–ë–û–†–ö–ò:");
        for (i, log) in result.logs.iter().take(10).enumerate() {
            println!("  {} {}", (i + 1).to_string().bright_black(), log);
        }
        if result.logs.len() > 10 {
            println!("  ... –∏ –µ—â–µ {} —Å–æ–æ–±—â–µ–Ω–∏–π", result.logs.len() - 10);
        }
    }

    // –û—à–∏–±–∫–∏
    if !result.errors.is_empty() {
        println!("\n‚ùå –û–®–ò–ë–ö–ò:");
        for (i, error) in result.errors.iter().enumerate() {
            println!("  {}. {}", (i + 1).to_string().bright_red(), error.bright_red());
        }
    }

    println!("{}", "=".repeat(60).bright_black());
}