use anyhow::{Context, Result};
use colored::*;
use tracing::{info, warn, error};

use crate::cli::validate::ValidateCommand;
use crate::config::parser::Config;
use crate::config::validator::ConfigValidator;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã validate
pub async fn handle_validate_command(cmd: ValidateCommand, config_file: &str) -> Result<()> {
    info!("üß™ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    // –ü–æ–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é. –§–ª–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π.
    match ConfigValidator::validate(&config) {
        Ok(_) => {
            println!("{} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞", "‚úÖ".green());
            if cmd.metadata {
                println!("  ‚Ä¢ {} –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", "metadata".bright_black());
            }
            if cmd.compatibility {
                println!("  ‚Ä¢ {} –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–∫ (–±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)", "compatibility".bright_black());
            }
            if cmd.full {
                println!("  ‚Ä¢ {} –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "full".bright_black());
            }
            Ok(())
        }
        Err(e) => {
            error!("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", e);
            println!("{} –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", "‚ùå".red(), e);
            Err(e)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_handle_validate_command_runs() {
        let cmd = ValidateCommand { metadata: true, compatibility: true, full: true };
        let _ = handle_validate_command(cmd, "plugin-repository/config.toml").await;
    }
}
