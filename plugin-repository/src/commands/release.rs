use anyhow::{Context, Result};
use tracing::{info, warn, error};
use colored::*;
use std::fs;

use crate::config::parser::Config;
use crate::cli::release::ReleaseCommand;
use crate::core::releaser::ReleaseManager;
use crate::git::GitRepository;
use crate::core::llm::agents::LLMAgentManager;

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã release
pub async fn handle_release_command(
    command: ReleaseCommand,
    config_file: &str,
) -> Result<()> {
    info!("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–ª–∏–∑–∞");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    let config = Config::load_from_file(config_file)
        .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {}", config_file))?;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.validate()
        .with_context(|| "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")?;

    // –°–æ–∑–¥–∞–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    let current_dir = std::env::current_dir()
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;
    let git_repo = GitRepository::new(&current_dir);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if !git_repo.is_valid_repository() {
        eprintln!("{} –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º", "‚ùå".red());
        return Err(anyhow::anyhow!("–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"));
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤
    let agent_manager = LLMAgentManager::from_config(&config)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LLM –∞–≥–µ–Ω—Ç–æ–≤")?;

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ª–∏–∑–æ–≤
    let release_manager = ReleaseManager::new(
        git_repo.clone(),
        agent_manager,
        config.project.clone(),
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    if let Some(version) = command.rollback {
        return handle_rollback(&release_manager, &version, command.verbose).await;
    }

    if command.history {
        return handle_history(&release_manager, command.limit, command.verbose).await;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞
    handle_release_process(&release_manager, command).await
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–ª–∏–∑–∞
async fn handle_release_process(
    release_manager: &ReleaseManager,
    command: ReleaseCommand,
) -> Result<()> {
    info!("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞");

    if command.verbose {
        println!("{} üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞", "=".repeat(60).bright_black());
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–ª–∏–∑
    let preparation_result = release_manager.prepare_release(command.version.clone()).await?;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    display_preparation_result(&preparation_result, command.verbose);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if !preparation_result.success {
        error!("‚ùå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏");
        return Err(anyhow::anyhow!("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if !command.skip_validation && !preparation_result.validation_issues.is_empty() && !command.force {
        warn!("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:");
        for issue in &preparation_result.validation_issues {
            println!("  ‚Ä¢ {}", issue.yellow());
        }

        if !command.dry_run {
            println!("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ --skip-validation –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
            return Err(anyhow::anyhow!("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"));
        }
    }

    // Dry run —Ä–µ–∂–∏–º
    if command.dry_run {
        println!("\nüîç DRY RUN MODE - —Ä–µ–ª–∏–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω");
        if command.verbose {
            println!("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞");
        }
        return Ok(());
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    println!("\nüè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞...");
    let tag_name = release_manager.create_release(&preparation_result.release.version, None).await?;

    println!("‚úÖ –†–µ–ª–∏–∑ {} —Å–æ–∑–¥–∞–Ω", tag_name.green());

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    save_artifacts(&preparation_result, &command)?;

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    if !command.no_publish {
        println!("\nüì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞...");
        release_manager.publish_release(&preparation_result.release.version).await?;
        println!("‚úÖ –†–µ–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
    } else {
        println!("üì¶ –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ (–æ–ø—Ü–∏—è --no-publish)");
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    println!("\n{}", "=".repeat(60).bright_black());
    println!("üéâ –†–µ–ª–∏–∑ {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", preparation_result.release.version.green());
    println!("{}", "=".repeat(60).bright_black());

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞
async fn handle_rollback(
    release_manager: &ReleaseManager,
    version: &str,
    verbose: bool,
) -> Result<()> {
    warn!("‚è™ –û—Ç–∫–∞—Ç —Ä–µ–ª–∏–∑–∞ v{}", version);

    if verbose {
        println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ v{}", version);
    }

    release_manager.rollback_release(version).await?;

    println!("‚úÖ –†–µ–ª–∏–∑ v{} –æ—Ç–∫–∞—á–µ–Ω", version.green());
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ª–∏–∑–æ–≤
async fn handle_history(
    release_manager: &ReleaseManager,
    limit: usize,
    verbose: bool,
) -> Result<()> {
    info!("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–ª–∏–∑–æ–≤");

    let releases = release_manager.get_release_history(Some(limit)).await?;

    if releases.is_empty() {
        println!("üì≠ –†–µ–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return Ok(());
    }

    println!("{}", "=".repeat(60).bright_black());
    println!("üìö –ò–°–¢–û–†–ò–Ø –†–ï–õ–ò–ó–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {})", releases.len());
    println!("{}", "=".repeat(60).bright_black());

    for (index, release) in releases.iter().enumerate() {
        println!("\n{}. {} ({})",
            index + 1,
            release.tag.bright_blue(),
            release.version.bright_green()
        );

        if verbose {
            println!("   üìÖ –î–∞—Ç–∞: {}", release.date.format("%Y-%m-%d %H:%M:%S"));
            println!("   üìù –ö–æ–º–º–∏—Ç: {}", release.commit);
            if let Some(message) = &release.message {
                println!("   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {}", message);
            }
            println!("   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π: {}", release.changes_count);
        }
    }

    println!("\n{}", "=".repeat(60).bright_black());
    Ok(())
}

/// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–∞
fn display_preparation_result(result: &crate::core::releaser::ReleasePreparationResult, verbose: bool) {
    println!("\n{}", "=".repeat(60).bright_black());
    println!("üìã –ü–û–î–ì–û–¢–û–í–ö–ê –†–ï–õ–ò–ó–ê v{}", result.release.version.bright_green());
    println!("{}", "=".repeat(60).bright_black());

    println!("üìà –í–µ—Ä—Å–∏—è: {} ({:?})", result.release.version.bright_green(), result.release.version_type);
    println!("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π: {}", result.release.changes_count);
    println!("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {}", result.release.breaking_changes);
    println!("üìÖ –î–∞—Ç–∞: {}", result.release.estimated_release_date.format("%Y-%m-%d %H:%M:%S"));

    if verbose {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º release notes
        if let Some(notes) = &result.release.release_notes {
            println!("\nüìù RELEASE NOTES:");
            println!("{}", "-".repeat(40).bright_black());
            println!("{}", notes);
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º changelog
        if let Some(changelog) = &result.release.changelog {
            println!("\nüìã CHANGELOG:");
            println!("{}", "-".repeat(40).bright_black());
            println!("{}", changelog);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if !result.warnings.is_empty() {
        println!("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:");
        for warning in &result.warnings {
            println!("  ‚Ä¢ {}", warning.yellow());
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏
    if !result.errors.is_empty() {
        println!("\n‚ùå –û–®–ò–ë–ö–ò:");
        for error in &result.errors {
            println!("  ‚Ä¢ {}", error.red());
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if !result.validation_issues.is_empty() {
        println!("\nüîç –ü–†–û–ë–õ–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò:");
        for issue in &result.validation_issues {
            println!("  ‚Ä¢ {}", issue.bright_yellow());
        }
    }

    println!("{}", "=".repeat(60).bright_black());
}

/// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ä–µ–ª–∏–∑–∞
fn save_artifacts(
    result: &crate::core::releaser::ReleasePreparationResult,
    command: &ReleaseCommand,
) -> Result<()> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º release notes
    if let Some(file_path) = &command.save_notes {
        if let Some(notes) = &result.release.release_notes {
            fs::write(file_path, notes)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å release notes –≤ —Ñ–∞–π–ª: {}", file_path))?;
            println!("üíæ Release notes —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {}", file_path.green());
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º changelog
    if let Some(file_path) = &command.save_changelog {
        if let Some(changelog) = &result.release.changelog {
            let content = format!("# CHANGELOG v{}\n\n{}", result.release.version, changelog);
            fs::write(file_path, content)
                .with_context(|| format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å changelog –≤ —Ñ–∞–π–ª: {}", file_path))?;
            println!("üíæ Changelog —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}", file_path.green());
        }
    }

    Ok(())
}